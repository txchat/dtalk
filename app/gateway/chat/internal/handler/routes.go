// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	call "github.com/txchat/dtalk/app/gateway/chat/internal/handler/call"
	group "github.com/txchat/dtalk/app/gateway/chat/internal/handler/group"
	oss "github.com/txchat/dtalk/app/gateway/chat/internal/handler/oss"
	record "github.com/txchat/dtalk/app/gateway/chat/internal/handler/record"
	user "github.com/txchat/dtalk/app/gateway/chat/internal/handler/user"
	"github.com/txchat/dtalk/app/gateway/chat/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AppAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/app/start-call",
					Handler: call.StartCallHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/reply-busy",
					Handler: call.ReplyBusyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/check-call",
					Handler: call.CheckCallHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/handle-call",
					Handler: call.HandleCallHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AppAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/app/record/revoke",
					Handler: record.RevokeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/record/focus",
					Handler: record.FocusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/record/seq-range",
					Handler: record.GetSeqRangeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/record/pull",
					Handler: record.PullHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/record/private-roaming",
					Handler: record.PullPrivateRoamingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/record/group-roaming",
					Handler: record.PullGroupRoamingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/record/last-private-arrival",
					Handler: record.LastPrivateArrivalHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/record/send",
					Handler: record.SendHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AppAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/app/user/login",
					Handler: user.LoginHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AppAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/group/app/change-owner",
					Handler: group.ChangeOwnerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/create-group",
					Handler: group.CreateGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-info",
					Handler: group.GetGroupInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-list",
					Handler: group.GetGroupListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-member-info",
					Handler: group.GetGroupMemberInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-member-list",
					Handler: group.GetGroupMemberListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/mute-list",
					Handler: group.GetMuteListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-pub-info",
					Handler: group.GetGroupPubInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-disband",
					Handler: group.DisbandGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-exit",
					Handler: group.MemberExitGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/group-remove",
					Handler: group.MemberRemoveGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/invite-group-members",
					Handler: group.InviteGroupMembersHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/join-group",
					Handler: group.JoinGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/member/type",
					Handler: group.SetAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/avatar",
					Handler: group.UpdateGroupAvatarHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/friendType",
					Handler: group.UpdateGroupFriendTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/joinType",
					Handler: group.UpdateGroupJoinTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/member/muteTime",
					Handler: group.UpdateGroupMemberMuteTimeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/member/name",
					Handler: group.UpdateGroupMemberNameHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/muteType",
					Handler: group.UpdateGroupMuteTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/app/name",
					Handler: group.UpdateGroupNameHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AppAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/oss/get-token",
					Handler: oss.GetTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oss/get-huaweiyun-token",
					Handler: oss.GetHWCloudTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oss/upload",
					Handler: oss.UploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oss/init-multipart-upload",
					Handler: oss.InitMultiUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oss/upload-part",
					Handler: oss.UploadPartHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oss/complete-multipart-upload",
					Handler: oss.CompleteMultiUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oss/abort-multipart-upload",
					Handler: oss.AbortMultiUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oss/get-host",
					Handler: oss.GetHostHandler(serverCtx),
				},
			}...,
		),
	)
}
