// Code generated by goctl. DO NOT EDIT.
package types

type StartCallReq struct {
	GroupId  string   `json:"groupId"`
	Invitees []string `json:"invitees"`
	RTCType  int32    `json:"RTCType,options=1|2"` //1->音频, 2->视频
}

type StartCallResp struct {
	TraceId    int64    `json:"traceId"`
	TraceIdStr string   `json:"traceIdStr"`
	RTCType    int32    `json:"RTCType"` //1->音频, 2->视频
	Invitees   []string `json:"invitees"`
	Caller     string   `json:"caller"`
	CreateTime int64    `json:"createTime"`
	Timeout    int32    `json:"timeout"`
	Deadline   int64    `json:"deadline"`
	GroupId    string   `json:"groupId"` // 0->私聊, ^0->群id
}

type ReplyBusyReq struct {
	TraceId    int64  `json:"traceId"`
	TraceIdStr string `json:"traceIdStr,optional"` // 如果同时填了 tracedIdStr, 则优先选择 traceIdStr
}

type ReplyBusyResp struct {
}

type CheckCallReq struct {
	TraceId    int64  `json:"traceId"`
	TraceIdStr string `json:"traceIdStr,optional"` // 如果同时填了 tracedIdStr, 则优先选择 traceIdStr
}

type CheckCallResp struct {
	TraceId    int64    `json:"traceId"`
	TraceIdStr string   `json:"traceIdStr"`
	RTCType    int32    `json:"RTCType"` //1->音频, 2->视频
	Invitees   []string `json:"invitees"`
	Caller     string   `json:"caller"`
	CreateTime int64    `json:"createTime"`
	Timeout    int32    `json:"timeout"`
	Deadline   int64    `json:"deadline"`
	GroupId    string   `json:"groupId"` // 0->私聊, ^0->群id
}

type HandleCallReq struct {
	Answer     bool   `json:"answer"`
	TraceId    int64  `json:"traceId"`
	TraceIdStr string `json:"traceIdStr,optional"` // 如果同时填了 tracedIdStr, 则优先选择 traceIdStr
}

type HandleCallResp struct {
	RoomId        int32  `json:"roomId"`
	UserSig       string `json:"userSig"`
	PrivateMapKey string `json:"privateMapKey"`
	SDKAppId      int32  `json:"sdkAppId"`
}

type RevokeReq struct {
	Type int   `json:"type,optional,options=0|1"` //撤回类型: 0->私聊, 1->群聊
	Mid  int64 `json:"logId"`
}

type RevokeResp struct {
}

type FocusReq struct {
	Type int   `json:"type,optional,options=0|1"` //关注类型: 0->私聊, 1->群聊
	Mid  int64 `json:"logId"`
}

type FocusResp struct {
}

type GetSeqRangeReq struct {
}

type GetSeqRangeResp struct {
	MaxSeq int64 `json:"maxSeq"`
	MinSeq int64 `json:"minSeq"`
}

type PullReq struct {
	SeqList []int64 `json:"seqList"`
}

type PullResp struct {
	Records [][]byte `json:"records"`
}

type PullPrivateRoamingReq struct {
	Session string `json:"session"`
	Size    int32  `json:"size"`
	Cursor  int64  `json:"cursor"`
}

type PullPrivateRoamingResp struct {
	Records []*Record `json:"records"`
}

type PullGroupRoamingReq struct {
	Session string `json:"session"`
	Size    int32  `json:"size"`
	Cursor  int64  `json:"cursor"`
}

type PullGroupRoamingResp struct {
	Records []*Record `json:"records"`
}

type LastPrivateArrivalReq struct {
	Session string `json:"session"`
}

type LastPrivateArrivalResp struct {
	Mid string `json:"mid"`
}

type SyncReq struct {
	MaxCount int64 `json:"count,range=[1:1000]"` // 消息数量
	StartMid int64 `json:"start,optional"`       // 消息 ID
}

type SyncResp struct {
	RecordCount int      `json:"record_count"` // 聊天记录数量
	Records     []string `json:"records"`      // 聊天记录 base64 encoding
}

type PrivateRecordReq struct {
	FromId      string `json:"-"`
	TargetId    string `json:"targetId"`
	RecordCount int64  `json:"count,range=[1:100]"`
	Mid         string `json:"logId"`
}

type PrivateRecordResp struct {
	RecordCount int       `json:"record_count"` // 聊天记录数量
	Records     []*Record `json:"records"`      // 聊天记录
}

type Record struct {
	Mid        string      `json:"logId"`      // log id
	Seq        string      `json:"msgId"`      // msg id (uuid)
	FromId     string      `json:"fromId"`     // 发送者 id
	TargetId   string      `json:"targetId"`   // 接收者 id
	MsgType    int32       `json:"msgType"`    // 消息类型
	Content    interface{} `json:"content"`    // 消息内容
	CreateTime uint64      `json:"createTime"` // 消息发送时间
}

type PushReq struct {
	File string `form:"file"`
}

type PushResp struct {
	Mid      int64  `json:"logId"`
	Datetime uint64 `json:"datetime"`
}

type LoginReq struct {
	ConnType int32 `json:"connType,optional"`
}

type LoginResp struct {
	Address string `json:"address"`
}

type GroupInfo struct {
	Id         int64        `json:"id"`
	IdStr      string       `json:"idStr"`
	MarkId     string       `json:"markId"`
	Name       string       `json:"name"`       //群成员可见的群名称（加密）
	PublicName string       `json:"publicName"` //对外公开群名称
	Avatar     string       `json:"avatar"`
	Introduce  string       `json:"introduce"`
	Owner      *GroupMember `json:"owner"`
	Person     *GroupMember `json:"person"` //个人群内的信息
	MemberNum  int32        `json:"memberNum"`
	Maximum    int32        `json:"maximum"`
	Status     int32        `json:"status,options=0|1|2"` //群状态:0->正常, 1->封禁, 2->解散
	CreateTime int64        `json:"createTime"`
	JoinType   int32        `json:"joinType,options=0|1|2"` //加群方式:0->无需审批, 1->仅群主和管理员邀请加群, 2->普通成员邀请需审批
	MuteType   int32        `json:"muteType"`               //0->全员可发言, 1->全员禁言(除群主和管理员)
	FriendType int32        `json:"friendType"`             //0->群内可加好友, 1->群内禁止加好友
	MuteNum    int32        `json:"muteNum"`                //禁言人数
	AdminNum   int32        `json:"adminNum"`               //管理员人数
	AESKey     string       `json:"key"`
	GroupType  int32        `json:"groupType"` //群类型：0->普通群, 1->企业群, 2->部门群
}

type GroupMember struct {
	MemberId       string `json:"memberId"`
	MemberName     string `json:"memberName"`
	MemberType     int32  `json:"memberType"`     //用户角色:0->群员, 1->管理员, 2->群主, 10->退群
	MemberMuteTime int64  `json:"memberMuteTime"` // 禁言截止时间: 9223372036854775807->永久禁言
}

type ChangeOwnerReq struct {
	Id       int64  `json:"id,optional"`
	IdStr    string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MemberId string `json:"memberId"`
}

type ChangeOwnerResp struct {
}

type CreateGroupReq struct {
	Name      string   `json:"name"`
	Avatar    string   `json:"avatar,optional"`
	Introduce string   `json:"introduce,optional"`
	MemberIds []string `json:"memberIds,optional"`
}

type CreateGroupResp struct {
	GroupInfo
	Members []*GroupMember `json:"members"`
}

type GetGroupInfoReq struct {
	Id    int64  `json:"id,optional"`
	IdStr string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
}

type GetGroupInfoResp struct {
	GroupInfo
	Members []*GroupMember `json:"members"`
}

type GetGroupListReq struct {
}

type GetGroupListResp struct {
	Groups []*GroupInfo `json:"groups"`
}

type GetGroupMemberInfoReq struct {
	Id       int64  `json:"id,optional"`
	IdStr    string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MemberId string `json:"memberId" uri:"memberId"`
}

type GetGroupMemberInfoResp struct {
	GroupMember
}

type GetGroupMemberListReq struct {
	Id    int64  `json:"id,optional"`
	IdStr string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
}

type GetGroupMemberListResp struct {
	Id      int64          `json:"id,optional"`
	IdStr   string         `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	Members []*GroupMember `json:"members"`
}

type GetMuteListReq struct {
	Id    int64  `json:"id,optional"`
	IdStr string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
}

type GetMuteListResp struct {
	Members []*GroupMember `json:"members"`
}

type GetGroupPubInfoReq struct {
	Id    int64  `json:"id,optional"`
	IdStr string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
}

type GetGroupPubInfoResp struct {
	GroupInfo
}

type DisbandGroupReq struct {
	Id    int64  `json:"id,optional"`
	IdStr string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
}

type DisbandGroupResp struct {
}

type MemberExitGroupReq struct {
	Id    int64  `json:"id,optional"`
	IdStr string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
}

type MemberExitGroupResp struct {
}

type MemberRemoveGroupReq struct {
	Id        int64    `json:"id,optional"`
	IdStr     string   `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MemberIds []string `json:"memberIds"`
}

type MemberRemoveGroupResp struct {
	MemberNum int32    `json:"memberNum"`
	MemberIds []string `json:"memberIds"`
}

type InviteGroupMembersReq struct {
	Id           int64    `json:"id,optional"`
	IdStr        string   `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	NewMemberIds []string `json:"newMemberIds"`
}

type InviteGroupMembersResp struct {
	Id        int64  `json:"id,optional" example:"123821199217135616"`
	IdStr     string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MemberNum int32  `json:"memberNum" example:"5"`
}

type JoinGroupReq struct {
	Id        int64  `json:"id"`
	IdStr     string `json:"idStr"`
	InviterId string `json:"inviterId"`
}

type JoinGroupResp struct {
	Id    int64  `json:"id"`
	IdStr string `json:"idStr"`
}

type SetAdminReq struct {
	Id         int64  `json:"id,optional"`
	IdStr      string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MemberId   string `json:"memberId"`
	MemberType int32  `json:"memberType" enums:"0,1"` //用户角色:0->群员, 1->管理员
}

type SetAdminResp struct {
}

type UpdateGroupAvatarReq struct {
	Id     int64  `json:"id,optional"`
	IdStr  string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	Avatar string `json:"avatar"`
}

type UpdateGroupAvatarResp struct {
}

type UpdateGroupFriendTypeReq struct {
	Id         int64  `json:"id,optional"`
	IdStr      string `json:"idStr,optional"`         // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	FriendType int32  `json:"friendType,options=0|1"` //0->群内可加好友, 1->群内禁止加好友
}

type UpdateGroupFriendTypeResp struct {
}

type UpdateGroupJoinTypeReq struct {
	Id       int64  `json:"id,optional"`
	IdStr    string `json:"idStr,optional"`         // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	JoinType int32  `json:"joinType,options=0|1|2"` //加群方式:0->无需审批, 1->仅群主和管理员邀请加群, 2->普通成员邀请需审批
}

type UpdateGroupJoinTypeResp struct {
}

type UpdateGroupMemberMuteTimeReq struct {
	Id        int64    `json:"id,optional"`
	IdStr     string   `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MemberIds []string `json:"memberIds"`
	MuteTime  int64    `json:"muteTime"` //禁言截止时间: 0->解除禁言, 9223372036854775807->永久禁言
}

type UpdateGroupMemberMuteTimeResp struct {
	Members []*GroupMember `json:"members"`
}

type UpdateGroupMemberNameReq struct {
	Id         int64  `json:"id,optional"`
	IdStr      string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MemberName string `json:"memberName"`
}

type UpdateGroupMemberNameResp struct {
}

type UpdateGroupMuteTypeReq struct {
	Id       int64  `json:"id,optional"`
	IdStr    string `json:"idStr,optional"`       // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	MuteType int32  `json:"muteType,options=0|1"` //0->全员可发言, 1->全员禁言(除群主和管理员)
}

type UpdateGroupMuteTypeResp struct {
}

type UpdateGroupNameReq struct {
	Id         int64  `json:"id,optional"`
	IdStr      string `json:"idStr,optional"` // 群 ID, 如果同时填了 idStr, 则优先选择 idStr
	Name       string `json:"name"`
	PublicName string `json:"publicName"`
}

type UpdateGroupNameResp struct {
}

type CreateJoinGroupApplyReq struct {
	Id        string `json:"id,omitempty"`
	ApplyNote string `json:"applyNote,omitempty"`
}

type CreateJoinGroupApplyResp struct {
}

type Credentials struct {
	AccessKeySecret string `json:"AccessKeySecret" xml:"AccessKeySecret"`
	Expiration      string `json:"Expiration" xml:"Expiration"`
	AccessKeyId     string `json:"AccessKeyId" xml:"AccessKeyId"`
	SecurityToken   string `json:"SecurityToken" xml:"SecurityToken"`
}

type AssumedRoleUser struct {
	AssumedRoleId string `json:"AssumedRoleId" xml:"AssumedRoleId"`
	Arn           string `json:"Arn" xml:"Arn"`
}

type GetTokenReq struct {
}

type GetTokenResp struct {
	RequestId       string          `json:"RequestId" xml:"RequestId"`
	Credentials     Credentials     `json:"Credentials" xml:"Credentials"`
	AssumedRoleUser AssumedRoleUser `json:"AssumedRoleUser" xml:"AssumedRoleUser"`
}

type GetHWCloudTokenReq struct {
}

type GetHWCloudTokenResp struct {
	RequestId       string          `json:"RequestId" xml:"RequestId"`
	Credentials     Credentials     `json:"Credentials" xml:"Credentials"`
	AssumedRoleUser AssumedRoleUser `json:"AssumedRoleUser" xml:"AssumedRoleUser"`
}

type OssBase struct {
	AppId   string `json:"appId"`
	OssType string `json:"ossType,optional,options=huaweiyun|aliyun|minio"` //云服务商（选填）: 自动选择默认服务商, 或者指定
}

type Part struct {
	ETag       string `json:"ETag"`                       // 段数据的MD5值
	PartNumber int32  `json:"partNumber,range=[1:10000]"` //分段序号, 范围是1~10000
}

type UploadReq struct {
	OssBase
	Key string `json:"key"` // 文件名(包含路径)
}

type UploadResp struct {
	Url string `json:"url"`
	Uri string `json:"uri"`
}

type InitMultiUploadReq struct {
	OssBase
	Key string `json:"key"` // 文件名(包含路径)
}

type InitMultiUploadResp struct {
	UploadId string `json:"uploadId"` // 分段上传任务全局唯一标识
	Key      string `json:"key"`      // 文件名(包含路径)
}

type UploadPartReq struct {
	OssBase
	Key        string `json:"key"`                        // 文件名(包含路径)
	UploadId   string `json:"uploadId"`                   // 分段上传任务全局唯一标识
	PartNumber int32  `json:"partNumber,range=[1:10000]"` // 分段序号, 范围是1~10000
}

type UploadPartResp struct {
	Part
	UploadId string `json:"uploadId"` // 分段上传任务全局唯一标识
	Key      string `json:"key"`      // 文件名(包含路径)
}

type CompleteMultiUploadReq struct {
	OssBase
	Key      string `json:"key"`      // 文件名(包含路径)
	UploadId string `json:"uploadId"` // 分段上传任务全局唯一标识
	Parts    []Part `json:"parts"`
}

type CompleteMultiUploadResp struct {
	Url string `json:"url"`
	Uri string `json:"uri"`
}

type AbortMultiUploadReq struct {
	OssBase
	Key      string `json:"key"`      // 文件名(包含路径)
	UploadId string `json:"uploadId"` // 分段上传任务全局唯一标识
}

type AbortMultiUploadResp struct {
}

type GetHostReq struct {
	OssBase
}

type GetHostResp struct {
	Host string `json:"host"`
}
