// Code generated by goctl. DO NOT EDIT!
// Source: group.proto

package server

import (
	"context"

	"github.com/txchat/dtalk/app/services/group/group"
	"github.com/txchat/dtalk/app/services/group/internal/logic"
	"github.com/txchat/dtalk/app/services/group/internal/svc"
)

type GroupServer struct {
	svcCtx *svc.ServiceContext
	group.UnimplementedGroupServer
}

func NewGroupServer(svcCtx *svc.ServiceContext) *GroupServer {
	return &GroupServer{
		svcCtx: svcCtx,
	}
}

func (s *GroupServer) GroupInfo(ctx context.Context, in *group.GroupInfoReq) (*group.GroupInfoResp, error) {
	l := logic.NewGroupInfoLogic(ctx, s.svcCtx)
	return l.GroupInfo(in)
}

func (s *GroupServer) MemberInfo(ctx context.Context, in *group.MemberInfoReq) (*group.MemberInfoResp, error) {
	l := logic.NewMemberInfoLogic(ctx, s.svcCtx)
	return l.MemberInfo(in)
}

func (s *GroupServer) GroupLimitedMembers(ctx context.Context, in *group.GroupLimitedMembersReq) (*group.GroupLimitedMembersResp, error) {
	l := logic.NewGroupLimitedMembersLogic(ctx, s.svcCtx)
	return l.GroupLimitedMembers(in)
}

func (s *GroupServer) CreateGroup(ctx context.Context, in *group.CreateGroupReq) (*group.CreateGroupResp, error) {
	l := logic.NewCreateGroupLogic(ctx, s.svcCtx)
	return l.CreateGroup(in)
}

func (s *GroupServer) JoinedGroups(ctx context.Context, in *group.JoinedGroupsReq) (*group.JoinedGroupsResp, error) {
	l := logic.NewJoinedGroupsLogic(ctx, s.svcCtx)
	return l.JoinedGroups(in)
}

func (s *GroupServer) ChangeOwner(ctx context.Context, in *group.ChangeOwnerReq) (*group.ChangeOwnerResp, error) {
	l := logic.NewChangeOwnerLogic(ctx, s.svcCtx)
	return l.ChangeOwner(in)
}

func (s *GroupServer) DisbandGroup(ctx context.Context, in *group.DisbandGroupReq) (*group.DisbandGroupResp, error) {
	l := logic.NewDisbandGroupLogic(ctx, s.svcCtx)
	return l.DisbandGroup(in)
}

func (s *GroupServer) UpdateGroupName(ctx context.Context, in *group.UpdateGroupNameReq) (*group.UpdateGroupNameResp, error) {
	l := logic.NewUpdateGroupNameLogic(ctx, s.svcCtx)
	return l.UpdateGroupName(in)
}

func (s *GroupServer) UpdateGroupAvatar(ctx context.Context, in *group.UpdateGroupAvatarReq) (*group.UpdateGroupAvatarResp, error) {
	l := logic.NewUpdateGroupAvatarLogic(ctx, s.svcCtx)
	return l.UpdateGroupAvatar(in)
}

func (s *GroupServer) UpdateGroupJoinType(ctx context.Context, in *group.UpdateGroupJoinTypeReq) (*group.UpdateGroupJoinTypeResp, error) {
	l := logic.NewUpdateGroupJoinTypeLogic(ctx, s.svcCtx)
	return l.UpdateGroupJoinType(in)
}

func (s *GroupServer) UpdateGroupFriendlyType(ctx context.Context, in *group.UpdateGroupFriendlyTypeReq) (*group.UpdateGroupFriendlyTypeResp, error) {
	l := logic.NewUpdateGroupFriendlyTypeLogic(ctx, s.svcCtx)
	return l.UpdateGroupFriendlyType(in)
}

func (s *GroupServer) UpdateGroupMuteType(ctx context.Context, in *group.UpdateGroupMuteTypeReq) (*group.UpdateGroupMuteTypeResp, error) {
	l := logic.NewUpdateGroupMuteTypeLogic(ctx, s.svcCtx)
	return l.UpdateGroupMuteType(in)
}
