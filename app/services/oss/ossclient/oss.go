// Code generated by goctl. DO NOT EDIT!
// Source: oss.proto

package ossclient

import (
	"context"

	"github.com/txchat/dtalk/app/services/oss/oss"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AbortUploadMultiPartReq     = oss.AbortUploadMultiPartReq
	AbortUploadMultiPartResp    = oss.AbortUploadMultiPartResp
	AssumeRoleReq               = oss.AssumeRoleReq
	AssumeRoleResp              = oss.AssumeRoleResp
	AssumedRoleUser             = oss.AssumedRoleUser
	BaseInfo                    = oss.BaseInfo
	CompleteUploadMultiPartReq  = oss.CompleteUploadMultiPartReq
	CompleteUploadMultiPartResp = oss.CompleteUploadMultiPartResp
	Credentials                 = oss.Credentials
	EngineHostReq               = oss.EngineHostReq
	EngineHostResp              = oss.EngineHostResp
	InitUploadMultiPartReq      = oss.InitUploadMultiPartReq
	InitUploadMultiPartResp     = oss.InitUploadMultiPartResp
	PartInfo                    = oss.PartInfo
	UploadMultiPartReq          = oss.UploadMultiPartReq
	UploadMultiPartResp         = oss.UploadMultiPartResp
	UploadReq                   = oss.UploadReq
	UploadResp                  = oss.UploadResp

	Oss interface {
		AssumeRole(ctx context.Context, in *AssumeRoleReq, opts ...grpc.CallOption) (*AssumeRoleResp, error)
		EngineHost(ctx context.Context, in *EngineHostReq, opts ...grpc.CallOption) (*EngineHostResp, error)
		Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error)
		InitUploadMultiPart(ctx context.Context, in *InitUploadMultiPartReq, opts ...grpc.CallOption) (*InitUploadMultiPartResp, error)
		UploadMultiPart(ctx context.Context, in *UploadMultiPartReq, opts ...grpc.CallOption) (*UploadMultiPartResp, error)
		CompleteUploadMultiPart(ctx context.Context, in *CompleteUploadMultiPartReq, opts ...grpc.CallOption) (*CompleteUploadMultiPartResp, error)
		AbortUploadMultiPart(ctx context.Context, in *AbortUploadMultiPartReq, opts ...grpc.CallOption) (*AbortUploadMultiPartResp, error)
	}

	defaultOss struct {
		cli zrpc.Client
	}
)

func NewOss(cli zrpc.Client) Oss {
	return &defaultOss{
		cli: cli,
	}
}

func (m *defaultOss) AssumeRole(ctx context.Context, in *AssumeRoleReq, opts ...grpc.CallOption) (*AssumeRoleResp, error) {
	client := oss.NewOssClient(m.cli.Conn())
	return client.AssumeRole(ctx, in, opts...)
}

func (m *defaultOss) EngineHost(ctx context.Context, in *EngineHostReq, opts ...grpc.CallOption) (*EngineHostResp, error) {
	client := oss.NewOssClient(m.cli.Conn())
	return client.EngineHost(ctx, in, opts...)
}

func (m *defaultOss) Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error) {
	client := oss.NewOssClient(m.cli.Conn())
	return client.Upload(ctx, in, opts...)
}

func (m *defaultOss) InitUploadMultiPart(ctx context.Context, in *InitUploadMultiPartReq, opts ...grpc.CallOption) (*InitUploadMultiPartResp, error) {
	client := oss.NewOssClient(m.cli.Conn())
	return client.InitUploadMultiPart(ctx, in, opts...)
}

func (m *defaultOss) UploadMultiPart(ctx context.Context, in *UploadMultiPartReq, opts ...grpc.CallOption) (*UploadMultiPartResp, error) {
	client := oss.NewOssClient(m.cli.Conn())
	return client.UploadMultiPart(ctx, in, opts...)
}

func (m *defaultOss) CompleteUploadMultiPart(ctx context.Context, in *CompleteUploadMultiPartReq, opts ...grpc.CallOption) (*CompleteUploadMultiPartResp, error) {
	client := oss.NewOssClient(m.cli.Conn())
	return client.CompleteUploadMultiPart(ctx, in, opts...)
}

func (m *defaultOss) AbortUploadMultiPart(ctx context.Context, in *AbortUploadMultiPartReq, opts ...grpc.CallOption) (*AbortUploadMultiPartResp, error) {
	client := oss.NewOssClient(m.cli.Conn())
	return client.AbortUploadMultiPart(ctx, in, opts...)
}
