// Code generated by goctl. DO NOT EDIT!
// Source: oss.proto

package server

import (
	"context"

	"github.com/txchat/dtalk/app/services/oss/internal/logic"
	"github.com/txchat/dtalk/app/services/oss/internal/svc"
	"github.com/txchat/dtalk/app/services/oss/oss"
)

type OssServer struct {
	svcCtx *svc.ServiceContext
	oss.UnimplementedOssServer
}

func NewOssServer(svcCtx *svc.ServiceContext) *OssServer {
	return &OssServer{
		svcCtx: svcCtx,
	}
}

func (s *OssServer) AssumeRole(ctx context.Context, in *oss.AssumeRoleReq) (*oss.AssumeRoleResp, error) {
	l := logic.NewAssumeRoleLogic(ctx, s.svcCtx)
	return l.AssumeRole(in)
}

func (s *OssServer) EngineHost(ctx context.Context, in *oss.EngineHostReq) (*oss.EngineHostResp, error) {
	l := logic.NewEngineHostLogic(ctx, s.svcCtx)
	return l.EngineHost(in)
}

func (s *OssServer) Upload(ctx context.Context, in *oss.UploadReq) (*oss.UploadResp, error) {
	l := logic.NewUploadLogic(ctx, s.svcCtx)
	return l.Upload(in)
}

func (s *OssServer) InitUploadMultiPart(ctx context.Context, in *oss.InitUploadMultiPartReq) (*oss.InitUploadMultiPartResp, error) {
	l := logic.NewInitUploadMultiPartLogic(ctx, s.svcCtx)
	return l.InitUploadMultiPart(in)
}

func (s *OssServer) UploadMultiPart(ctx context.Context, in *oss.UploadMultiPartReq) (*oss.UploadMultiPartResp, error) {
	l := logic.NewUploadMultiPartLogic(ctx, s.svcCtx)
	return l.UploadMultiPart(in)
}

func (s *OssServer) CompleteUploadMultiPart(ctx context.Context, in *oss.CompleteUploadMultiPartReq) (*oss.CompleteUploadMultiPartResp, error) {
	l := logic.NewCompleteUploadMultiPartLogic(ctx, s.svcCtx)
	return l.CompleteUploadMultiPart(in)
}

func (s *OssServer) AbortUploadMultiPart(ctx context.Context, in *oss.AbortUploadMultiPartReq) (*oss.AbortUploadMultiPartResp, error) {
	l := logic.NewAbortUploadMultiPartLogic(ctx, s.svcCtx)
	return l.AbortUploadMultiPart(in)
}
