// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oss

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OssClient is the client API for Oss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OssClient interface {
	AssumeRole(ctx context.Context, in *AssumeRoleReq, opts ...grpc.CallOption) (*AssumeRoleResp, error)
	EngineHost(ctx context.Context, in *EngineHostReq, opts ...grpc.CallOption) (*EngineHostResp, error)
	Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error)
	InitUploadMultiPart(ctx context.Context, in *InitUploadMultiPartReq, opts ...grpc.CallOption) (*InitUploadMultiPartResp, error)
	UploadMultiPart(ctx context.Context, in *UploadMultiPartReq, opts ...grpc.CallOption) (*UploadMultiPartResp, error)
	CompleteUploadMultiPart(ctx context.Context, in *CompleteUploadMultiPartReq, opts ...grpc.CallOption) (*CompleteUploadMultiPartResp, error)
	AbortUploadMultiPart(ctx context.Context, in *AbortUploadMultiPartReq, opts ...grpc.CallOption) (*AbortUploadMultiPartResp, error)
}

type ossClient struct {
	cc grpc.ClientConnInterface
}

func NewOssClient(cc grpc.ClientConnInterface) OssClient {
	return &ossClient{cc}
}

func (c *ossClient) AssumeRole(ctx context.Context, in *AssumeRoleReq, opts ...grpc.CallOption) (*AssumeRoleResp, error) {
	out := new(AssumeRoleResp)
	err := c.cc.Invoke(ctx, "/oss.Oss/AssumeRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossClient) EngineHost(ctx context.Context, in *EngineHostReq, opts ...grpc.CallOption) (*EngineHostResp, error) {
	out := new(EngineHostResp)
	err := c.cc.Invoke(ctx, "/oss.Oss/EngineHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossClient) Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error) {
	out := new(UploadResp)
	err := c.cc.Invoke(ctx, "/oss.Oss/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossClient) InitUploadMultiPart(ctx context.Context, in *InitUploadMultiPartReq, opts ...grpc.CallOption) (*InitUploadMultiPartResp, error) {
	out := new(InitUploadMultiPartResp)
	err := c.cc.Invoke(ctx, "/oss.Oss/InitUploadMultiPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossClient) UploadMultiPart(ctx context.Context, in *UploadMultiPartReq, opts ...grpc.CallOption) (*UploadMultiPartResp, error) {
	out := new(UploadMultiPartResp)
	err := c.cc.Invoke(ctx, "/oss.Oss/UploadMultiPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossClient) CompleteUploadMultiPart(ctx context.Context, in *CompleteUploadMultiPartReq, opts ...grpc.CallOption) (*CompleteUploadMultiPartResp, error) {
	out := new(CompleteUploadMultiPartResp)
	err := c.cc.Invoke(ctx, "/oss.Oss/CompleteUploadMultiPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossClient) AbortUploadMultiPart(ctx context.Context, in *AbortUploadMultiPartReq, opts ...grpc.CallOption) (*AbortUploadMultiPartResp, error) {
	out := new(AbortUploadMultiPartResp)
	err := c.cc.Invoke(ctx, "/oss.Oss/AbortUploadMultiPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OssServer is the server API for Oss service.
// All implementations must embed UnimplementedOssServer
// for forward compatibility
type OssServer interface {
	AssumeRole(context.Context, *AssumeRoleReq) (*AssumeRoleResp, error)
	EngineHost(context.Context, *EngineHostReq) (*EngineHostResp, error)
	Upload(context.Context, *UploadReq) (*UploadResp, error)
	InitUploadMultiPart(context.Context, *InitUploadMultiPartReq) (*InitUploadMultiPartResp, error)
	UploadMultiPart(context.Context, *UploadMultiPartReq) (*UploadMultiPartResp, error)
	CompleteUploadMultiPart(context.Context, *CompleteUploadMultiPartReq) (*CompleteUploadMultiPartResp, error)
	AbortUploadMultiPart(context.Context, *AbortUploadMultiPartReq) (*AbortUploadMultiPartResp, error)
	mustEmbedUnimplementedOssServer()
}

// UnimplementedOssServer must be embedded to have forward compatible implementations.
type UnimplementedOssServer struct {
}

func (UnimplementedOssServer) AssumeRole(context.Context, *AssumeRoleReq) (*AssumeRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssumeRole not implemented")
}
func (UnimplementedOssServer) EngineHost(context.Context, *EngineHostReq) (*EngineHostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EngineHost not implemented")
}
func (UnimplementedOssServer) Upload(context.Context, *UploadReq) (*UploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedOssServer) InitUploadMultiPart(context.Context, *InitUploadMultiPartReq) (*InitUploadMultiPartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUploadMultiPart not implemented")
}
func (UnimplementedOssServer) UploadMultiPart(context.Context, *UploadMultiPartReq) (*UploadMultiPartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMultiPart not implemented")
}
func (UnimplementedOssServer) CompleteUploadMultiPart(context.Context, *CompleteUploadMultiPartReq) (*CompleteUploadMultiPartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUploadMultiPart not implemented")
}
func (UnimplementedOssServer) AbortUploadMultiPart(context.Context, *AbortUploadMultiPartReq) (*AbortUploadMultiPartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortUploadMultiPart not implemented")
}
func (UnimplementedOssServer) mustEmbedUnimplementedOssServer() {}

// UnsafeOssServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OssServer will
// result in compilation errors.
type UnsafeOssServer interface {
	mustEmbedUnimplementedOssServer()
}

func RegisterOssServer(s grpc.ServiceRegistrar, srv OssServer) {
	s.RegisterService(&Oss_ServiceDesc, srv)
}

func _Oss_AssumeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssumeRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).AssumeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.Oss/AssumeRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).AssumeRole(ctx, req.(*AssumeRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oss_EngineHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).EngineHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.Oss/EngineHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).EngineHost(ctx, req.(*EngineHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oss_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.Oss/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).Upload(ctx, req.(*UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oss_InitUploadMultiPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitUploadMultiPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).InitUploadMultiPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.Oss/InitUploadMultiPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).InitUploadMultiPart(ctx, req.(*InitUploadMultiPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oss_UploadMultiPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMultiPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).UploadMultiPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.Oss/UploadMultiPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).UploadMultiPart(ctx, req.(*UploadMultiPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oss_CompleteUploadMultiPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadMultiPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).CompleteUploadMultiPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.Oss/CompleteUploadMultiPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).CompleteUploadMultiPart(ctx, req.(*CompleteUploadMultiPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oss_AbortUploadMultiPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortUploadMultiPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).AbortUploadMultiPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.Oss/AbortUploadMultiPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).AbortUploadMultiPart(ctx, req.(*AbortUploadMultiPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Oss_ServiceDesc is the grpc.ServiceDesc for Oss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oss.Oss",
	HandlerType: (*OssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssumeRole",
			Handler:    _Oss_AssumeRole_Handler,
		},
		{
			MethodName: "EngineHost",
			Handler:    _Oss_EngineHost_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _Oss_Upload_Handler,
		},
		{
			MethodName: "InitUploadMultiPart",
			Handler:    _Oss_InitUploadMultiPart_Handler,
		},
		{
			MethodName: "UploadMultiPart",
			Handler:    _Oss_UploadMultiPart_Handler,
		},
		{
			MethodName: "CompleteUploadMultiPart",
			Handler:    _Oss_CompleteUploadMultiPart_Handler,
		},
		{
			MethodName: "AbortUploadMultiPart",
			Handler:    _Oss_AbortUploadMultiPart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oss.proto",
}
