// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storage

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	DelRecord(ctx context.Context, in *DelRecordReq, opts ...grpc.CallOption) (*DelRecordReply, error)
	GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordReply, error)
	AddRecordFocus(ctx context.Context, in *AddRecordFocusReq, opts ...grpc.CallOption) (*AddRecordFocusReply, error)
	GetRecordsAfterMid(ctx context.Context, in *GetRecordsAfterMidReq, opts ...grpc.CallOption) (*GetRecordsAfterMidReply, error)
	GetSyncRecordsAfterMid(ctx context.Context, in *GetSyncRecordsAfterMidReq, opts ...grpc.CallOption) (*GetSyncRecordsAfterMidReply, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) DelRecord(ctx context.Context, in *DelRecordReq, opts ...grpc.CallOption) (*DelRecordReply, error) {
	out := new(DelRecordReply)
	err := c.cc.Invoke(ctx, "/storage.Storage/DelRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordReply, error) {
	out := new(GetRecordReply)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) AddRecordFocus(ctx context.Context, in *AddRecordFocusReq, opts ...grpc.CallOption) (*AddRecordFocusReply, error) {
	out := new(AddRecordFocusReply)
	err := c.cc.Invoke(ctx, "/storage.Storage/AddRecordFocus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRecordsAfterMid(ctx context.Context, in *GetRecordsAfterMidReq, opts ...grpc.CallOption) (*GetRecordsAfterMidReply, error) {
	out := new(GetRecordsAfterMidReply)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetRecordsAfterMid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSyncRecordsAfterMid(ctx context.Context, in *GetSyncRecordsAfterMidReq, opts ...grpc.CallOption) (*GetSyncRecordsAfterMidReply, error) {
	out := new(GetSyncRecordsAfterMidReply)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetSyncRecordsAfterMid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	DelRecord(context.Context, *DelRecordReq) (*DelRecordReply, error)
	GetRecord(context.Context, *GetRecordReq) (*GetRecordReply, error)
	AddRecordFocus(context.Context, *AddRecordFocusReq) (*AddRecordFocusReply, error)
	GetRecordsAfterMid(context.Context, *GetRecordsAfterMidReq) (*GetRecordsAfterMidReply, error)
	GetSyncRecordsAfterMid(context.Context, *GetSyncRecordsAfterMidReq) (*GetSyncRecordsAfterMidReply, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) DelRecord(context.Context, *DelRecordReq) (*DelRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRecord not implemented")
}
func (UnimplementedStorageServer) GetRecord(context.Context, *GetRecordReq) (*GetRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedStorageServer) AddRecordFocus(context.Context, *AddRecordFocusReq) (*AddRecordFocusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecordFocus not implemented")
}
func (UnimplementedStorageServer) GetRecordsAfterMid(context.Context, *GetRecordsAfterMidReq) (*GetRecordsAfterMidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordsAfterMid not implemented")
}
func (UnimplementedStorageServer) GetSyncRecordsAfterMid(context.Context, *GetSyncRecordsAfterMidReq) (*GetSyncRecordsAfterMidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncRecordsAfterMid not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_DelRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DelRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DelRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DelRecord(ctx, req.(*DelRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRecord(ctx, req.(*GetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_AddRecordFocus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordFocusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).AddRecordFocus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/AddRecordFocus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).AddRecordFocus(ctx, req.(*AddRecordFocusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRecordsAfterMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsAfterMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRecordsAfterMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetRecordsAfterMid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRecordsAfterMid(ctx, req.(*GetRecordsAfterMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSyncRecordsAfterMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncRecordsAfterMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSyncRecordsAfterMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetSyncRecordsAfterMid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSyncRecordsAfterMid(ctx, req.(*GetSyncRecordsAfterMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelRecord",
			Handler:    _Storage_DelRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Storage_GetRecord_Handler,
		},
		{
			MethodName: "AddRecordFocus",
			Handler:    _Storage_AddRecordFocus_Handler,
		},
		{
			MethodName: "GetRecordsAfterMid",
			Handler:    _Storage_GetRecordsAfterMid_Handler,
		},
		{
			MethodName: "GetSyncRecordsAfterMid",
			Handler:    _Storage_GetSyncRecordsAfterMid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
