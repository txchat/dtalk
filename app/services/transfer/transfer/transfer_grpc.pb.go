// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transfer

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferClient interface {
	TransferMessage(ctx context.Context, in *TransferMessageReq, opts ...grpc.CallOption) (*TransferMessageResp, error)
	PreSendMessageCheck(ctx context.Context, in *PreSendMessageCheckReq, opts ...grpc.CallOption) (*PreSendMessageCheckResp, error)
}

type transferClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferClient(cc grpc.ClientConnInterface) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) TransferMessage(ctx context.Context, in *TransferMessageReq, opts ...grpc.CallOption) (*TransferMessageResp, error) {
	out := new(TransferMessageResp)
	err := c.cc.Invoke(ctx, "/transfer.Transfer/TransferMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) PreSendMessageCheck(ctx context.Context, in *PreSendMessageCheckReq, opts ...grpc.CallOption) (*PreSendMessageCheckResp, error) {
	out := new(PreSendMessageCheckResp)
	err := c.cc.Invoke(ctx, "/transfer.Transfer/PreSendMessageCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServer is the server API for Transfer service.
// All implementations must embed UnimplementedTransferServer
// for forward compatibility
type TransferServer interface {
	TransferMessage(context.Context, *TransferMessageReq) (*TransferMessageResp, error)
	PreSendMessageCheck(context.Context, *PreSendMessageCheckReq) (*PreSendMessageCheckResp, error)
	mustEmbedUnimplementedTransferServer()
}

// UnimplementedTransferServer must be embedded to have forward compatible implementations.
type UnimplementedTransferServer struct {
}

func (UnimplementedTransferServer) TransferMessage(context.Context, *TransferMessageReq) (*TransferMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMessage not implemented")
}
func (UnimplementedTransferServer) PreSendMessageCheck(context.Context, *PreSendMessageCheckReq) (*PreSendMessageCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreSendMessageCheck not implemented")
}
func (UnimplementedTransferServer) mustEmbedUnimplementedTransferServer() {}

// UnsafeTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServer will
// result in compilation errors.
type UnsafeTransferServer interface {
	mustEmbedUnimplementedTransferServer()
}

func RegisterTransferServer(s grpc.ServiceRegistrar, srv TransferServer) {
	s.RegisterService(&Transfer_ServiceDesc, srv)
}

func _Transfer_TransferMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).TransferMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.Transfer/TransferMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).TransferMessage(ctx, req.(*TransferMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_PreSendMessageCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreSendMessageCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).PreSendMessageCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.Transfer/PreSendMessageCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).PreSendMessageCheck(ctx, req.(*PreSendMessageCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Transfer_ServiceDesc is the grpc.ServiceDesc for Transfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferMessage",
			Handler:    _Transfer_TransferMessage_Handler,
		},
		{
			MethodName: "PreSendMessageCheck",
			Handler:    _Transfer_PreSendMessageCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
