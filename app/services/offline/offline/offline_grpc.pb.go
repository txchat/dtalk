// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package offline

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfflineClient is the client API for Offline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfflineClient interface {
}

type offlineClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineClient(cc grpc.ClientConnInterface) OfflineClient {
	return &offlineClient{cc}
}

// OfflineServer is the server API for Offline service.
// All implementations must embed UnimplementedOfflineServer
// for forward compatibility
type OfflineServer interface {
	mustEmbedUnimplementedOfflineServer()
}

// UnimplementedOfflineServer must be embedded to have forward compatible implementations.
type UnimplementedOfflineServer struct {
}

func (UnimplementedOfflineServer) mustEmbedUnimplementedOfflineServer() {}

// UnsafeOfflineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfflineServer will
// result in compilation errors.
type UnsafeOfflineServer interface {
	mustEmbedUnimplementedOfflineServer()
}

func RegisterOfflineServer(s grpc.ServiceRegistrar, srv OfflineServer) {
	s.RegisterService(&Offline_ServiceDesc, srv)
}

// Offline_ServiceDesc is the grpc.ServiceDesc for Offline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Offline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "offline.Offline",
	HandlerType: (*OfflineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "offline.proto",
}
