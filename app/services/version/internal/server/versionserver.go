// Code generated by goctl. DO NOT EDIT!
// Source: version.proto

package server

import (
	"context"

	"github.com/txchat/dtalk/app/services/version/internal/logic"
	"github.com/txchat/dtalk/app/services/version/internal/svc"
	"github.com/txchat/dtalk/app/services/version/version"
)

type VersionServer struct {
	svcCtx *svc.ServiceContext
	version.UnimplementedVersionServer
}

func NewVersionServer(svcCtx *svc.ServiceContext) *VersionServer {
	return &VersionServer{
		svcCtx: svcCtx,
	}
}

func (s *VersionServer) Create(ctx context.Context, in *version.CreateReq) (*version.CreateResp, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

func (s *VersionServer) Update(ctx context.Context, in *version.UpdateReq) (*version.UpdateResp, error) {
	l := logic.NewUpdateLogic(ctx, s.svcCtx)
	return l.Update(in)
}

func (s *VersionServer) Query(ctx context.Context, in *version.QueryReq) (*version.QueryResp, error) {
	l := logic.NewQueryLogic(ctx, s.svcCtx)
	return l.Query(in)
}

func (s *VersionServer) ReleaseSpecificVersion(ctx context.Context, in *version.ReleaseSpecificVersionReq) (*version.ReleaseSpecificVersionResp, error) {
	l := logic.NewReleaseSpecificVersionLogic(ctx, s.svcCtx)
	return l.ReleaseSpecificVersion(in)
}

func (s *VersionServer) SpecificPlatformAndDeviceTypeVersions(ctx context.Context, in *version.SpecificPlatformAndDeviceTypeVersionsReq) (*version.SpecificPlatformAndDeviceTypeVersionsReqResp, error) {
	l := logic.NewSpecificPlatformAndDeviceTypeVersionsLogic(ctx, s.svcCtx)
	return l.SpecificPlatformAndDeviceTypeVersions(in)
}

func (s *VersionServer) SpecificPlatformAndDeviceTypeCount(ctx context.Context, in *version.SpecificPlatformAndDeviceTypeCountReq) (*version.SpecificPlatformAndDeviceTypeCountResp, error) {
	l := logic.NewSpecificPlatformAndDeviceTypeCountLogic(ctx, s.svcCtx)
	return l.SpecificPlatformAndDeviceTypeCount(in)
}

func (s *VersionServer) LastReleaseVersion(ctx context.Context, in *version.LastReleaseVersionReq) (*version.LastReleaseVersionResp, error) {
	l := logic.NewLastReleaseVersionLogic(ctx, s.svcCtx)
	return l.LastReleaseVersion(in)
}

func (s *VersionServer) ForceNumberBetween(ctx context.Context, in *version.ForceNumberBetweenReq) (*version.ForceNumberBetweenResp, error) {
	l := logic.NewForceNumberBetweenLogic(ctx, s.svcCtx)
	return l.ForceNumberBetween(in)
}
