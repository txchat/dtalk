// Code generated by goctl. DO NOT EDIT!
// Source: version.proto

package versionclient

import (
	"context"

	"github.com/txchat/dtalk/app/services/version/version"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateReq                                    = version.CreateReq
	CreateResp                                   = version.CreateResp
	ForceNumberBetweenReq                        = version.ForceNumberBetweenReq
	ForceNumberBetweenResp                       = version.ForceNumberBetweenResp
	LastReleaseVersionReq                        = version.LastReleaseVersionReq
	LastReleaseVersionResp                       = version.LastReleaseVersionResp
	QueryReq                                     = version.QueryReq
	QueryResp                                    = version.QueryResp
	ReleaseSpecificVersionReq                    = version.ReleaseSpecificVersionReq
	ReleaseSpecificVersionResp                   = version.ReleaseSpecificVersionResp
	SpecificPlatformAndDeviceTypeCountReq        = version.SpecificPlatformAndDeviceTypeCountReq
	SpecificPlatformAndDeviceTypeCountResp       = version.SpecificPlatformAndDeviceTypeCountResp
	SpecificPlatformAndDeviceTypeVersionsReq     = version.SpecificPlatformAndDeviceTypeVersionsReq
	SpecificPlatformAndDeviceTypeVersionsReqResp = version.SpecificPlatformAndDeviceTypeVersionsReqResp
	UpdateReq                                    = version.UpdateReq
	UpdateResp                                   = version.UpdateResp
	VersionInfo                                  = version.VersionInfo

	Version interface {
		Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
		Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryResp, error)
		ReleaseSpecificVersion(ctx context.Context, in *ReleaseSpecificVersionReq, opts ...grpc.CallOption) (*ReleaseSpecificVersionResp, error)
		SpecificPlatformAndDeviceTypeVersions(ctx context.Context, in *SpecificPlatformAndDeviceTypeVersionsReq, opts ...grpc.CallOption) (*SpecificPlatformAndDeviceTypeVersionsReqResp, error)
		SpecificPlatformAndDeviceTypeCount(ctx context.Context, in *SpecificPlatformAndDeviceTypeCountReq, opts ...grpc.CallOption) (*SpecificPlatformAndDeviceTypeCountResp, error)
		LastReleaseVersion(ctx context.Context, in *LastReleaseVersionReq, opts ...grpc.CallOption) (*LastReleaseVersionResp, error)
		ForceNumberBetween(ctx context.Context, in *ForceNumberBetweenReq, opts ...grpc.CallOption) (*ForceNumberBetweenResp, error)
	}

	defaultVersion struct {
		cli zrpc.Client
	}
)

func NewVersion(cli zrpc.Client) Version {
	return &defaultVersion{
		cli: cli,
	}
}

func (m *defaultVersion) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultVersion) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultVersion) Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.Query(ctx, in, opts...)
}

func (m *defaultVersion) ReleaseSpecificVersion(ctx context.Context, in *ReleaseSpecificVersionReq, opts ...grpc.CallOption) (*ReleaseSpecificVersionResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.ReleaseSpecificVersion(ctx, in, opts...)
}

func (m *defaultVersion) SpecificPlatformAndDeviceTypeVersions(ctx context.Context, in *SpecificPlatformAndDeviceTypeVersionsReq, opts ...grpc.CallOption) (*SpecificPlatformAndDeviceTypeVersionsReqResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.SpecificPlatformAndDeviceTypeVersions(ctx, in, opts...)
}

func (m *defaultVersion) SpecificPlatformAndDeviceTypeCount(ctx context.Context, in *SpecificPlatformAndDeviceTypeCountReq, opts ...grpc.CallOption) (*SpecificPlatformAndDeviceTypeCountResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.SpecificPlatformAndDeviceTypeCount(ctx, in, opts...)
}

func (m *defaultVersion) LastReleaseVersion(ctx context.Context, in *LastReleaseVersionReq, opts ...grpc.CallOption) (*LastReleaseVersionResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.LastReleaseVersion(ctx, in, opts...)
}

func (m *defaultVersion) ForceNumberBetween(ctx context.Context, in *ForceNumberBetweenReq, opts ...grpc.CallOption) (*ForceNumberBetweenResp, error) {
	client := version.NewVersionClient(m.cli.Conn())
	return client.ForceNumberBetween(ctx, in, opts...)
}
