// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package call

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallClient is the client API for Call service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallClient interface {
	PrivateOffer(ctx context.Context, in *PrivateOfferReq, opts ...grpc.CallOption) (*PrivateOfferResp, error)
	GroupOffer(ctx context.Context, in *GroupOfferReq, opts ...grpc.CallOption) (*GroupOfferResp, error)
	Accept(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*AcceptResp, error)
	Reject(ctx context.Context, in *RejectReq, opts ...grpc.CallOption) (*RejectResp, error)
	CheckTask(ctx context.Context, in *CheckTaskReq, opts ...grpc.CallOption) (*CheckTaskResp, error)
}

type callClient struct {
	cc grpc.ClientConnInterface
}

func NewCallClient(cc grpc.ClientConnInterface) CallClient {
	return &callClient{cc}
}

func (c *callClient) PrivateOffer(ctx context.Context, in *PrivateOfferReq, opts ...grpc.CallOption) (*PrivateOfferResp, error) {
	out := new(PrivateOfferResp)
	err := c.cc.Invoke(ctx, "/call.Call/PrivateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callClient) GroupOffer(ctx context.Context, in *GroupOfferReq, opts ...grpc.CallOption) (*GroupOfferResp, error) {
	out := new(GroupOfferResp)
	err := c.cc.Invoke(ctx, "/call.Call/GroupOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callClient) Accept(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*AcceptResp, error) {
	out := new(AcceptResp)
	err := c.cc.Invoke(ctx, "/call.Call/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callClient) Reject(ctx context.Context, in *RejectReq, opts ...grpc.CallOption) (*RejectResp, error) {
	out := new(RejectResp)
	err := c.cc.Invoke(ctx, "/call.Call/Reject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callClient) CheckTask(ctx context.Context, in *CheckTaskReq, opts ...grpc.CallOption) (*CheckTaskResp, error) {
	out := new(CheckTaskResp)
	err := c.cc.Invoke(ctx, "/call.Call/CheckTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallServer is the server API for Call service.
// All implementations must embed UnimplementedCallServer
// for forward compatibility
type CallServer interface {
	PrivateOffer(context.Context, *PrivateOfferReq) (*PrivateOfferResp, error)
	GroupOffer(context.Context, *GroupOfferReq) (*GroupOfferResp, error)
	Accept(context.Context, *AcceptReq) (*AcceptResp, error)
	Reject(context.Context, *RejectReq) (*RejectResp, error)
	CheckTask(context.Context, *CheckTaskReq) (*CheckTaskResp, error)
	mustEmbedUnimplementedCallServer()
}

// UnimplementedCallServer must be embedded to have forward compatible implementations.
type UnimplementedCallServer struct {
}

func (UnimplementedCallServer) PrivateOffer(context.Context, *PrivateOfferReq) (*PrivateOfferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateOffer not implemented")
}
func (UnimplementedCallServer) GroupOffer(context.Context, *GroupOfferReq) (*GroupOfferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupOffer not implemented")
}
func (UnimplementedCallServer) Accept(context.Context, *AcceptReq) (*AcceptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedCallServer) Reject(context.Context, *RejectReq) (*RejectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedCallServer) CheckTask(context.Context, *CheckTaskReq) (*CheckTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTask not implemented")
}
func (UnimplementedCallServer) mustEmbedUnimplementedCallServer() {}

// UnsafeCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallServer will
// result in compilation errors.
type UnsafeCallServer interface {
	mustEmbedUnimplementedCallServer()
}

func RegisterCallServer(s grpc.ServiceRegistrar, srv CallServer) {
	s.RegisterService(&Call_ServiceDesc, srv)
}

func _Call_PrivateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).PrivateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/call.Call/PrivateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).PrivateOffer(ctx, req.(*PrivateOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Call_GroupOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).GroupOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/call.Call/GroupOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).GroupOffer(ctx, req.(*GroupOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Call_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/call.Call/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).Accept(ctx, req.(*AcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Call_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/call.Call/Reject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).Reject(ctx, req.(*RejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Call_CheckTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServer).CheckTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/call.Call/CheckTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServer).CheckTask(ctx, req.(*CheckTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Call_ServiceDesc is the grpc.ServiceDesc for Call service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Call_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "call.Call",
	HandlerType: (*CallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrivateOffer",
			Handler:    _Call_PrivateOffer_Handler,
		},
		{
			MethodName: "GroupOffer",
			Handler:    _Call_GroupOffer_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Call_Accept_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _Call_Reject_Handler,
		},
		{
			MethodName: "CheckTask",
			Handler:    _Call_CheckTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "call.proto",
}
