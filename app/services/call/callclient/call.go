// Code generated by goctl. DO NOT EDIT!
// Source: call.proto

package callclient

import (
	"context"

	"github.com/txchat/dtalk/app/services/call/call"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AcceptReq        = call.AcceptReq
	AcceptResp       = call.AcceptResp
	CheckTaskReq     = call.CheckTaskReq
	CheckTaskResp    = call.CheckTaskResp
	GroupOfferReq    = call.GroupOfferReq
	GroupOfferResp   = call.GroupOfferResp
	PrivateOfferReq  = call.PrivateOfferReq
	PrivateOfferResp = call.PrivateOfferResp
	RejectReq        = call.RejectReq
	RejectResp       = call.RejectResp
	Session          = call.Session

	Call interface {
		PrivateOffer(ctx context.Context, in *PrivateOfferReq, opts ...grpc.CallOption) (*PrivateOfferResp, error)
		GroupOffer(ctx context.Context, in *GroupOfferReq, opts ...grpc.CallOption) (*GroupOfferResp, error)
		Accept(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*AcceptResp, error)
		Reject(ctx context.Context, in *RejectReq, opts ...grpc.CallOption) (*RejectResp, error)
		CheckTask(ctx context.Context, in *CheckTaskReq, opts ...grpc.CallOption) (*CheckTaskResp, error)
	}

	defaultCall struct {
		cli zrpc.Client
	}
)

func NewCall(cli zrpc.Client) Call {
	return &defaultCall{
		cli: cli,
	}
}

func (m *defaultCall) PrivateOffer(ctx context.Context, in *PrivateOfferReq, opts ...grpc.CallOption) (*PrivateOfferResp, error) {
	client := call.NewCallClient(m.cli.Conn())
	return client.PrivateOffer(ctx, in, opts...)
}

func (m *defaultCall) GroupOffer(ctx context.Context, in *GroupOfferReq, opts ...grpc.CallOption) (*GroupOfferResp, error) {
	client := call.NewCallClient(m.cli.Conn())
	return client.GroupOffer(ctx, in, opts...)
}

func (m *defaultCall) Accept(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*AcceptResp, error) {
	client := call.NewCallClient(m.cli.Conn())
	return client.Accept(ctx, in, opts...)
}

func (m *defaultCall) Reject(ctx context.Context, in *RejectReq, opts ...grpc.CallOption) (*RejectResp, error) {
	client := call.NewCallClient(m.cli.Conn())
	return client.Reject(ctx, in, opts...)
}

func (m *defaultCall) CheckTask(ctx context.Context, in *CheckTaskReq, opts ...grpc.CallOption) (*CheckTaskResp, error) {
	client := call.NewCallClient(m.cli.Conn())
	return client.CheckTask(ctx, in, opts...)
}
