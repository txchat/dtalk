// Code generated by goctl. DO NOT EDIT!
// Source: answer.proto

package answerclient

import (
	"context"

	"github.com/txchat/dtalk/app/services/answer/answer"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GroupCastSignalReply = answer.GroupCastSignalReply
	GroupCastSignalReq   = answer.GroupCastSignalReq
	PushCommonMsgReply   = answer.PushCommonMsgReply
	PushCommonMsgReq     = answer.PushCommonMsgReq
	PushNoticeMsgReply   = answer.PushNoticeMsgReply
	PushNoticeMsgReq     = answer.PushNoticeMsgReq
	UniCastSignalReply   = answer.UniCastSignalReply
	UniCastSignalReq     = answer.UniCastSignalReq

	Answer interface {
		PushCommonMsg(ctx context.Context, in *PushCommonMsgReq, opts ...grpc.CallOption) (*PushCommonMsgReply, error)
		PushNoticeMsg(ctx context.Context, in *PushNoticeMsgReq, opts ...grpc.CallOption) (*PushNoticeMsgReply, error)
		UniCastSignal(ctx context.Context, in *UniCastSignalReq, opts ...grpc.CallOption) (*UniCastSignalReply, error)
		GroupCastSignal(ctx context.Context, in *GroupCastSignalReq, opts ...grpc.CallOption) (*GroupCastSignalReply, error)
	}

	defaultAnswer struct {
		cli zrpc.Client
	}
)

func NewAnswer(cli zrpc.Client) Answer {
	return &defaultAnswer{
		cli: cli,
	}
}

func (m *defaultAnswer) PushCommonMsg(ctx context.Context, in *PushCommonMsgReq, opts ...grpc.CallOption) (*PushCommonMsgReply, error) {
	client := answer.NewAnswerClient(m.cli.Conn())
	return client.PushCommonMsg(ctx, in, opts...)
}

func (m *defaultAnswer) PushNoticeMsg(ctx context.Context, in *PushNoticeMsgReq, opts ...grpc.CallOption) (*PushNoticeMsgReply, error) {
	client := answer.NewAnswerClient(m.cli.Conn())
	return client.PushNoticeMsg(ctx, in, opts...)
}

func (m *defaultAnswer) UniCastSignal(ctx context.Context, in *UniCastSignalReq, opts ...grpc.CallOption) (*UniCastSignalReply, error) {
	client := answer.NewAnswerClient(m.cli.Conn())
	return client.UniCastSignal(ctx, in, opts...)
}

func (m *defaultAnswer) GroupCastSignal(ctx context.Context, in *GroupCastSignalReq, opts ...grpc.CallOption) (*GroupCastSignalReply, error) {
	client := answer.NewAnswerClient(m.cli.Conn())
	return client.GroupCastSignal(ctx, in, opts...)
}
