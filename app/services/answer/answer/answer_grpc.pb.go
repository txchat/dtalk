// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package answer

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnswerClient is the client API for Answer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnswerClient interface {
	PushCommonMsg(ctx context.Context, in *PushCommonMsgReq, opts ...grpc.CallOption) (*PushCommonMsgReply, error)
	PushNoticeMsg(ctx context.Context, in *PushNoticeMsgReq, opts ...grpc.CallOption) (*PushNoticeMsgReply, error)
	UniCastSignal(ctx context.Context, in *UniCastSignalReq, opts ...grpc.CallOption) (*UniCastSignalReply, error)
	GroupCastSignal(ctx context.Context, in *GroupCastSignalReq, opts ...grpc.CallOption) (*GroupCastSignalReply, error)
}

type answerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnswerClient(cc grpc.ClientConnInterface) AnswerClient {
	return &answerClient{cc}
}

func (c *answerClient) PushCommonMsg(ctx context.Context, in *PushCommonMsgReq, opts ...grpc.CallOption) (*PushCommonMsgReply, error) {
	out := new(PushCommonMsgReply)
	err := c.cc.Invoke(ctx, "/answer.Answer/PushCommonMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerClient) PushNoticeMsg(ctx context.Context, in *PushNoticeMsgReq, opts ...grpc.CallOption) (*PushNoticeMsgReply, error) {
	out := new(PushNoticeMsgReply)
	err := c.cc.Invoke(ctx, "/answer.Answer/PushNoticeMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerClient) UniCastSignal(ctx context.Context, in *UniCastSignalReq, opts ...grpc.CallOption) (*UniCastSignalReply, error) {
	out := new(UniCastSignalReply)
	err := c.cc.Invoke(ctx, "/answer.Answer/UniCastSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerClient) GroupCastSignal(ctx context.Context, in *GroupCastSignalReq, opts ...grpc.CallOption) (*GroupCastSignalReply, error) {
	out := new(GroupCastSignalReply)
	err := c.cc.Invoke(ctx, "/answer.Answer/GroupCastSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswerServer is the server API for Answer service.
// All implementations must embed UnimplementedAnswerServer
// for forward compatibility
type AnswerServer interface {
	PushCommonMsg(context.Context, *PushCommonMsgReq) (*PushCommonMsgReply, error)
	PushNoticeMsg(context.Context, *PushNoticeMsgReq) (*PushNoticeMsgReply, error)
	UniCastSignal(context.Context, *UniCastSignalReq) (*UniCastSignalReply, error)
	GroupCastSignal(context.Context, *GroupCastSignalReq) (*GroupCastSignalReply, error)
	mustEmbedUnimplementedAnswerServer()
}

// UnimplementedAnswerServer must be embedded to have forward compatible implementations.
type UnimplementedAnswerServer struct {
}

func (UnimplementedAnswerServer) PushCommonMsg(context.Context, *PushCommonMsgReq) (*PushCommonMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushCommonMsg not implemented")
}
func (UnimplementedAnswerServer) PushNoticeMsg(context.Context, *PushNoticeMsgReq) (*PushNoticeMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNoticeMsg not implemented")
}
func (UnimplementedAnswerServer) UniCastSignal(context.Context, *UniCastSignalReq) (*UniCastSignalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniCastSignal not implemented")
}
func (UnimplementedAnswerServer) GroupCastSignal(context.Context, *GroupCastSignalReq) (*GroupCastSignalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCastSignal not implemented")
}
func (UnimplementedAnswerServer) mustEmbedUnimplementedAnswerServer() {}

// UnsafeAnswerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnswerServer will
// result in compilation errors.
type UnsafeAnswerServer interface {
	mustEmbedUnimplementedAnswerServer()
}

func RegisterAnswerServer(s grpc.ServiceRegistrar, srv AnswerServer) {
	s.RegisterService(&Answer_ServiceDesc, srv)
}

func _Answer_PushCommonMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushCommonMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServer).PushCommonMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/answer.Answer/PushCommonMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServer).PushCommonMsg(ctx, req.(*PushCommonMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Answer_PushNoticeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushNoticeMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServer).PushNoticeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/answer.Answer/PushNoticeMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServer).PushNoticeMsg(ctx, req.(*PushNoticeMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Answer_UniCastSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniCastSignalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServer).UniCastSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/answer.Answer/UniCastSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServer).UniCastSignal(ctx, req.(*UniCastSignalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Answer_GroupCastSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCastSignalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServer).GroupCastSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/answer.Answer/GroupCastSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServer).GroupCastSignal(ctx, req.(*GroupCastSignalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Answer_ServiceDesc is the grpc.ServiceDesc for Answer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Answer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "answer.Answer",
	HandlerType: (*AnswerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushCommonMsg",
			Handler:    _Answer_PushCommonMsg_Handler,
		},
		{
			MethodName: "PushNoticeMsg",
			Handler:    _Answer_PushNoticeMsg_Handler,
		},
		{
			MethodName: "UniCastSignal",
			Handler:    _Answer_UniCastSignal_Handler,
		},
		{
			MethodName: "GroupCastSignal",
			Handler:    _Answer_GroupCastSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/txchat/dtalk/app/services/answer/answer.proto",
}
