// Code generated by goctl. DO NOT EDIT!
// Source: answer.proto

package server

import (
	"context"

	"github.com/txchat/dtalk/app/services/answer/answer"
	"github.com/txchat/dtalk/app/services/answer/internal/logic"
	"github.com/txchat/dtalk/app/services/answer/internal/svc"
)

type AnswerServer struct {
	svcCtx *svc.ServiceContext
	answer.UnimplementedAnswerServer
}

func NewAnswerServer(svcCtx *svc.ServiceContext) *AnswerServer {
	return &AnswerServer{
		svcCtx: svcCtx,
	}
}

func (s *AnswerServer) PushCommonMsg(ctx context.Context, in *answer.PushCommonMsgReq) (*answer.PushCommonMsgReply, error) {
	l := logic.NewPushCommonMsgLogic(ctx, s.svcCtx)
	return l.PushCommonMsg(in)
}

func (s *AnswerServer) PushNoticeMsg(ctx context.Context, in *answer.PushNoticeMsgReq) (*answer.PushNoticeMsgReply, error) {
	l := logic.NewPushNoticeMsgLogic(ctx, s.svcCtx)
	return l.PushNoticeMsg(in)
}

func (s *AnswerServer) UniCastSignal(ctx context.Context, in *answer.UniCastSignalReq) (*answer.UniCastSignalReply, error) {
	l := logic.NewUniCastSignalLogic(ctx, s.svcCtx)
	return l.UniCastSignal(in)
}

func (s *AnswerServer) GroupCastSignal(ctx context.Context, in *answer.GroupCastSignalReq) (*answer.GroupCastSignalReply, error) {
	l := logic.NewGroupCastSignalLogic(ctx, s.svcCtx)
	return l.GroupCastSignal(in)
}
