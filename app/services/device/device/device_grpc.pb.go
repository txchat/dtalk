// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package device

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceClient interface {
	AddDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error)
	EnableThreadPushDevice(ctx context.Context, in *EnableThreadPushDeviceRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserAllDevices(ctx context.Context, in *GetUserAllDevicesRequest, opts ...grpc.CallOption) (*GetUserAllDevicesReply, error)
	GetDeviceByConnId(ctx context.Context, in *GetDeviceByConnIdRequest, opts ...grpc.CallOption) (*DeviceInfo, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) AddDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/device.Device/AddDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) EnableThreadPushDevice(ctx context.Context, in *EnableThreadPushDeviceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/device.Device/EnableThreadPushDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) GetUserAllDevices(ctx context.Context, in *GetUserAllDevicesRequest, opts ...grpc.CallOption) (*GetUserAllDevicesReply, error) {
	out := new(GetUserAllDevicesReply)
	err := c.cc.Invoke(ctx, "/device.Device/GetUserAllDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) GetDeviceByConnId(ctx context.Context, in *GetDeviceByConnIdRequest, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/device.Device/GetDeviceByConnId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
// All implementations must embed UnimplementedDeviceServer
// for forward compatibility
type DeviceServer interface {
	AddDevice(context.Context, *DeviceInfo) (*Empty, error)
	EnableThreadPushDevice(context.Context, *EnableThreadPushDeviceRequest) (*Empty, error)
	GetUserAllDevices(context.Context, *GetUserAllDevicesRequest) (*GetUserAllDevicesReply, error)
	GetDeviceByConnId(context.Context, *GetDeviceByConnIdRequest) (*DeviceInfo, error)
	mustEmbedUnimplementedDeviceServer()
}

// UnimplementedDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (UnimplementedDeviceServer) AddDevice(context.Context, *DeviceInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (UnimplementedDeviceServer) EnableThreadPushDevice(context.Context, *EnableThreadPushDeviceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableThreadPushDevice not implemented")
}
func (UnimplementedDeviceServer) GetUserAllDevices(context.Context, *GetUserAllDevicesRequest) (*GetUserAllDevicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAllDevices not implemented")
}
func (UnimplementedDeviceServer) GetDeviceByConnId(context.Context, *GetDeviceByConnIdRequest) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByConnId not implemented")
}
func (UnimplementedDeviceServer) mustEmbedUnimplementedDeviceServer() {}

// UnsafeDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServer will
// result in compilation errors.
type UnsafeDeviceServer interface {
	mustEmbedUnimplementedDeviceServer()
}

func RegisterDeviceServer(s grpc.ServiceRegistrar, srv DeviceServer) {
	s.RegisterService(&Device_ServiceDesc, srv)
}

func _Device_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).AddDevice(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_EnableThreadPushDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableThreadPushDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).EnableThreadPushDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/EnableThreadPushDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).EnableThreadPushDevice(ctx, req.(*EnableThreadPushDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_GetUserAllDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAllDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).GetUserAllDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/GetUserAllDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).GetUserAllDevices(ctx, req.(*GetUserAllDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_GetDeviceByConnId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByConnIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).GetDeviceByConnId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/GetDeviceByConnId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).GetDeviceByConnId(ctx, req.(*GetDeviceByConnIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Device_ServiceDesc is the grpc.ServiceDesc for Device service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Device_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _Device_AddDevice_Handler,
		},
		{
			MethodName: "EnableThreadPushDevice",
			Handler:    _Device_EnableThreadPushDevice_Handler,
		},
		{
			MethodName: "GetUserAllDevices",
			Handler:    _Device_GetUserAllDevices_Handler,
		},
		{
			MethodName: "GetDeviceByConnId",
			Handler:    _Device_GetDeviceByConnId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
