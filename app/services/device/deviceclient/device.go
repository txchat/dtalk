// Code generated by goctl. DO NOT EDIT!
// Source: device.proto

package deviceclient

import (
	"context"

	"github.com/txchat/dtalk/app/services/device/device"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeviceInfo                    = device.DeviceInfo
	Empty                         = device.Empty
	EnableThreadPushDeviceRequest = device.EnableThreadPushDeviceRequest
	GetDeviceByConnIdReply        = device.GetDeviceByConnIdReply
	GetDeviceByConnIdRequest      = device.GetDeviceByConnIdRequest
	GetUserAllDevicesReply        = device.GetUserAllDevicesReply
	GetUserAllDevicesRequest      = device.GetUserAllDevicesRequest

	Device interface {
		AddDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error)
		EnableThreadPushDevice(ctx context.Context, in *EnableThreadPushDeviceRequest, opts ...grpc.CallOption) (*Empty, error)
		GetUserAllDevices(ctx context.Context, in *GetUserAllDevicesRequest, opts ...grpc.CallOption) (*GetUserAllDevicesReply, error)
		GetDeviceByConnId(ctx context.Context, in *GetDeviceByConnIdRequest, opts ...grpc.CallOption) (*DeviceInfo, error)
	}

	defaultDevice struct {
		cli zrpc.Client
	}
)

func NewDevice(cli zrpc.Client) Device {
	return &defaultDevice{
		cli: cli,
	}
}

func (m *defaultDevice) AddDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := device.NewDeviceClient(m.cli.Conn())
	return client.AddDevice(ctx, in, opts...)
}

func (m *defaultDevice) EnableThreadPushDevice(ctx context.Context, in *EnableThreadPushDeviceRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := device.NewDeviceClient(m.cli.Conn())
	return client.EnableThreadPushDevice(ctx, in, opts...)
}

func (m *defaultDevice) GetUserAllDevices(ctx context.Context, in *GetUserAllDevicesRequest, opts ...grpc.CallOption) (*GetUserAllDevicesReply, error) {
	client := device.NewDeviceClient(m.cli.Conn())
	return client.GetUserAllDevices(ctx, in, opts...)
}

func (m *defaultDevice) GetDeviceByConnId(ctx context.Context, in *GetDeviceByConnIdRequest, opts ...grpc.CallOption) (*DeviceInfo, error) {
	client := device.NewDeviceClient(m.cli.Conn())
	return client.GetDeviceByConnId(ctx, in, opts...)
}
