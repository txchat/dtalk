// Code generated by goctl. DO NOT EDIT.
// Source: device.proto

package server

import (
	"context"

	"github.com/txchat/dtalk/app/services/device/device"
	"github.com/txchat/dtalk/app/services/device/internal/logic"
	"github.com/txchat/dtalk/app/services/device/internal/svc"
)

type DeviceServer struct {
	svcCtx *svc.ServiceContext
	device.UnimplementedDeviceServer
}

func NewDeviceServer(svcCtx *svc.ServiceContext) *DeviceServer {
	return &DeviceServer{
		svcCtx: svcCtx,
	}
}

func (s *DeviceServer) AddDevice(ctx context.Context, in *device.DeviceInfo) (*device.Empty, error) {
	l := logic.NewAddDeviceLogic(ctx, s.svcCtx)
	return l.AddDevice(in)
}

func (s *DeviceServer) EnableThreadPushDevice(ctx context.Context, in *device.EnableThreadPushDeviceRequest) (*device.Empty, error) {
	l := logic.NewEnableThreadPushDeviceLogic(ctx, s.svcCtx)
	return l.EnableThreadPushDevice(in)
}

func (s *DeviceServer) GetUserAllDevices(ctx context.Context, in *device.GetUserAllDevicesRequest) (*device.GetUserAllDevicesReply, error) {
	l := logic.NewGetUserAllDevicesLogic(ctx, s.svcCtx)
	return l.GetUserAllDevices(in)
}

func (s *DeviceServer) GetDeviceByConnId(ctx context.Context, in *device.GetDeviceByConnIdRequest) (*device.DeviceInfo, error) {
	l := logic.NewGetDeviceByConnIdLogic(ctx, s.svcCtx)
	return l.GetDeviceByConnId(in)
}
