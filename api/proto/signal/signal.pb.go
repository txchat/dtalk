// protoc -I=. -I=$GOPATH/src --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: github.com/txchat/dtalk/api/proto/signal.proto

package signal

import (
	reflect "reflect"
	sync "sync"

	auth "github.com/txchat/dtalk/api/proto/auth"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignalType int32

const (
	SignalType_Received      SignalType = 0
	SignalType_Revoke        SignalType = 1
	SignalType_SignInGroup   SignalType = 10
	SignalType_SignOutGroup  SignalType = 11
	SignalType_DeleteGroup   SignalType = 12
	SignalType_FocusMessage  SignalType = 13
	SignalType_EndpointLogin SignalType = 14
	//
	SignalType_UpdateGroupJoinType       SignalType = 20
	SignalType_UpdateGroupFriendType     SignalType = 21
	SignalType_UpdateGroupMuteType       SignalType = 22
	SignalType_UpdateGroupMemberType     SignalType = 23
	SignalType_UpdateGroupMemberMuteTime SignalType = 24
	SignalType_UpdateGroupName           SignalType = 25
	SignalType_UpdateGroupAvatar         SignalType = 26
	//
	SignalType_StartCall  SignalType = 31
	SignalType_AcceptCall SignalType = 32
	SignalType_StopCall   SignalType = 33
)

// Enum value maps for SignalType.
var (
	SignalType_name = map[int32]string{
		0:  "Received",
		1:  "Revoke",
		10: "SignInGroup",
		11: "SignOutGroup",
		12: "DeleteGroup",
		13: "FocusMessage",
		14: "EndpointLogin",
		20: "UpdateGroupJoinType",
		21: "UpdateGroupFriendType",
		22: "UpdateGroupMuteType",
		23: "UpdateGroupMemberType",
		24: "UpdateGroupMemberMuteTime",
		25: "UpdateGroupName",
		26: "UpdateGroupAvatar",
		31: "StartCall",
		32: "AcceptCall",
		33: "StopCall",
	}
	SignalType_value = map[string]int32{
		"Received":                  0,
		"Revoke":                    1,
		"SignInGroup":               10,
		"SignOutGroup":              11,
		"DeleteGroup":               12,
		"FocusMessage":              13,
		"EndpointLogin":             14,
		"UpdateGroupJoinType":       20,
		"UpdateGroupFriendType":     21,
		"UpdateGroupMuteType":       22,
		"UpdateGroupMemberType":     23,
		"UpdateGroupMemberMuteTime": 24,
		"UpdateGroupName":           25,
		"UpdateGroupAvatar":         26,
		"StartCall":                 31,
		"AcceptCall":                32,
		"StopCall":                  33,
	}
)

func (x SignalType) Enum() *SignalType {
	p := new(SignalType)
	*p = x
	return p
}

func (x SignalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[0].Descriptor()
}

func (SignalType) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[0]
}

func (x SignalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalType.Descriptor instead.
func (SignalType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{0}
}

type JoinType int32

const (
	JoinType_JoinAllow JoinType = 0
	JoinType_JoinDeny  JoinType = 1
	JoinType_JoinApply JoinType = 2
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "JoinAllow",
		1: "JoinDeny",
		2: "JoinApply",
	}
	JoinType_value = map[string]int32{
		"JoinAllow": 0,
		"JoinDeny":  1,
		"JoinApply": 2,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[1].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[1]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{1}
}

type FriendType int32

const (
	FriendType_FriendAllow FriendType = 0
	FriendType_FriendDeny  FriendType = 1
)

// Enum value maps for FriendType.
var (
	FriendType_name = map[int32]string{
		0: "FriendAllow",
		1: "FriendDeny",
	}
	FriendType_value = map[string]int32{
		"FriendAllow": 0,
		"FriendDeny":  1,
	}
)

func (x FriendType) Enum() *FriendType {
	p := new(FriendType)
	*p = x
	return p
}

func (x FriendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[2].Descriptor()
}

func (FriendType) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[2]
}

func (x FriendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendType.Descriptor instead.
func (FriendType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{2}
}

type MuteType int32

const (
	MuteType_MuteAllow MuteType = 0
	MuteType_MuteDeny  MuteType = 1
)

// Enum value maps for MuteType.
var (
	MuteType_name = map[int32]string{
		0: "MuteAllow",
		1: "MuteDeny",
	}
	MuteType_value = map[string]int32{
		"MuteAllow": 0,
		"MuteDeny":  1,
	}
)

func (x MuteType) Enum() *MuteType {
	p := new(MuteType)
	*p = x
	return p
}

func (x MuteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MuteType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[3].Descriptor()
}

func (MuteType) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[3]
}

func (x MuteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MuteType.Descriptor instead.
func (MuteType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{3}
}

type MemberType int32

const (
	MemberType_Normal MemberType = 0
	MemberType_Admin  MemberType = 1
	MemberType_Owner  MemberType = 2
)

// Enum value maps for MemberType.
var (
	MemberType_name = map[int32]string{
		0: "Normal",
		1: "Admin",
		2: "Owner",
	}
	MemberType_value = map[string]int32{
		"Normal": 0,
		"Admin":  1,
		"Owner":  2,
	}
)

func (x MemberType) Enum() *MemberType {
	p := new(MemberType)
	*p = x
	return p
}

func (x MemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[4].Descriptor()
}

func (MemberType) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[4]
}

func (x MemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberType.Descriptor instead.
func (MemberType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{4}
}

type StopCallType int32

const (
	StopCallType_Busy    StopCallType = 0
	StopCallType_Timeout StopCallType = 1
	StopCallType_Reject  StopCallType = 2
	StopCallType_Hangup  StopCallType = 3
	StopCallType_Cancel  StopCallType = 4
)

// Enum value maps for StopCallType.
var (
	StopCallType_name = map[int32]string{
		0: "Busy",
		1: "Timeout",
		2: "Reject",
		3: "Hangup",
		4: "Cancel",
	}
	StopCallType_value = map[string]int32{
		"Busy":    0,
		"Timeout": 1,
		"Reject":  2,
		"Hangup":  3,
		"Cancel":  4,
	}
)

func (x StopCallType) Enum() *StopCallType {
	p := new(StopCallType)
	*p = x
	return p
}

func (x StopCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[5].Descriptor()
}

func (StopCallType) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes[5]
}

func (x StopCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopCallType.Descriptor instead.
func (StopCallType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{5}
}

// alert msg define
type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SignalType `protobuf:"varint,1,opt,name=type,proto3,enum=dtalk.api.proto.SignalType" json:"type,omitempty"`
	Body []byte     `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{0}
}

func (x *Signal) GetType() SignalType {
	if x != nil {
		return x.Type
	}
	return SignalType_Received
}

func (x *Signal) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type SignalReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []int64 `protobuf:"varint,1,rep,packed,name=logs,proto3" json:"logs,omitempty"`
}

func (x *SignalReceived) Reset() {
	*x = SignalReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalReceived) ProtoMessage() {}

func (x *SignalReceived) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalReceived.ProtoReflect.Descriptor instead.
func (*SignalReceived) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{1}
}

func (x *SignalReceived) GetLogs() []int64 {
	if x != nil {
		return x.Logs
	}
	return nil
}

type SignalSignInGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   []string `protobuf:"bytes,1,rep,name=uid,proto3" json:"uid,omitempty"`
	Group int64    `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Time  int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalSignInGroup) Reset() {
	*x = SignalSignInGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSignInGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSignInGroup) ProtoMessage() {}

func (x *SignalSignInGroup) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSignInGroup.ProtoReflect.Descriptor instead.
func (*SignalSignInGroup) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{2}
}

func (x *SignalSignInGroup) GetUid() []string {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *SignalSignInGroup) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalSignInGroup) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalSignOutGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   []string `protobuf:"bytes,1,rep,name=uid,proto3" json:"uid,omitempty"`
	Group int64    `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Time  int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalSignOutGroup) Reset() {
	*x = SignalSignOutGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSignOutGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSignOutGroup) ProtoMessage() {}

func (x *SignalSignOutGroup) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSignOutGroup.ProtoReflect.Descriptor instead.
func (*SignalSignOutGroup) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{3}
}

func (x *SignalSignOutGroup) GetUid() []string {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *SignalSignOutGroup) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalSignOutGroup) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalDeleteGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group int64 `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Time  int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalDeleteGroup) Reset() {
	*x = SignalDeleteGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalDeleteGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalDeleteGroup) ProtoMessage() {}

func (x *SignalDeleteGroup) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalDeleteGroup.ProtoReflect.Descriptor instead.
func (*SignalDeleteGroup) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{4}
}

func (x *SignalDeleteGroup) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalDeleteGroup) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalFocusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid        int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Uid        string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	CurrentNum int32  `protobuf:"varint,3,opt,name=currentNum,proto3" json:"currentNum,omitempty"`
	Time       int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalFocusMessage) Reset() {
	*x = SignalFocusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalFocusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalFocusMessage) ProtoMessage() {}

func (x *SignalFocusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalFocusMessage.ProtoReflect.Descriptor instead.
func (*SignalFocusMessage) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{5}
}

func (x *SignalFocusMessage) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SignalFocusMessage) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SignalFocusMessage) GetCurrentNum() int32 {
	if x != nil {
		return x.CurrentNum
	}
	return 0
}

func (x *SignalFocusMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalEndpointLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Device     auth.Device `protobuf:"varint,2,opt,name=device,proto3,enum=dtalk.api.proto.Device" json:"device,omitempty"`
	DeviceName string      `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Datetime   int64       `protobuf:"varint,4,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *SignalEndpointLogin) Reset() {
	*x = SignalEndpointLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalEndpointLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalEndpointLogin) ProtoMessage() {}

func (x *SignalEndpointLogin) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalEndpointLogin.ProtoReflect.Descriptor instead.
func (*SignalEndpointLogin) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{6}
}

func (x *SignalEndpointLogin) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SignalEndpointLogin) GetDevice() auth.Device {
	if x != nil {
		return x.Device
	}
	return auth.Device(0)
}

func (x *SignalEndpointLogin) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SignalEndpointLogin) GetDatetime() int64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

type SignalUpdateGroupJoinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group int64    `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Type  JoinType `protobuf:"varint,2,opt,name=type,proto3,enum=dtalk.api.proto.JoinType" json:"type,omitempty"`
	Time  int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalUpdateGroupJoinType) Reset() {
	*x = SignalUpdateGroupJoinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUpdateGroupJoinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUpdateGroupJoinType) ProtoMessage() {}

func (x *SignalUpdateGroupJoinType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUpdateGroupJoinType.ProtoReflect.Descriptor instead.
func (*SignalUpdateGroupJoinType) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{7}
}

func (x *SignalUpdateGroupJoinType) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalUpdateGroupJoinType) GetType() JoinType {
	if x != nil {
		return x.Type
	}
	return JoinType_JoinAllow
}

func (x *SignalUpdateGroupJoinType) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalUpdateGroupFriendType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group int64      `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Type  FriendType `protobuf:"varint,2,opt,name=type,proto3,enum=dtalk.api.proto.FriendType" json:"type,omitempty"`
	Time  int64      `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalUpdateGroupFriendType) Reset() {
	*x = SignalUpdateGroupFriendType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUpdateGroupFriendType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUpdateGroupFriendType) ProtoMessage() {}

func (x *SignalUpdateGroupFriendType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUpdateGroupFriendType.ProtoReflect.Descriptor instead.
func (*SignalUpdateGroupFriendType) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{8}
}

func (x *SignalUpdateGroupFriendType) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalUpdateGroupFriendType) GetType() FriendType {
	if x != nil {
		return x.Type
	}
	return FriendType_FriendAllow
}

func (x *SignalUpdateGroupFriendType) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalUpdateGroupMuteType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group int64    `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Type  MuteType `protobuf:"varint,2,opt,name=type,proto3,enum=dtalk.api.proto.MuteType" json:"type,omitempty"`
	Time  int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalUpdateGroupMuteType) Reset() {
	*x = SignalUpdateGroupMuteType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUpdateGroupMuteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUpdateGroupMuteType) ProtoMessage() {}

func (x *SignalUpdateGroupMuteType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUpdateGroupMuteType.ProtoReflect.Descriptor instead.
func (*SignalUpdateGroupMuteType) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{9}
}

func (x *SignalUpdateGroupMuteType) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalUpdateGroupMuteType) GetType() MuteType {
	if x != nil {
		return x.Type
	}
	return MuteType_MuteAllow
}

func (x *SignalUpdateGroupMuteType) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalUpdateGroupMemberType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group int64      `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Uid   string     `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Type  MemberType `protobuf:"varint,3,opt,name=type,proto3,enum=dtalk.api.proto.MemberType" json:"type,omitempty"`
	Time  int64      `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalUpdateGroupMemberType) Reset() {
	*x = SignalUpdateGroupMemberType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUpdateGroupMemberType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUpdateGroupMemberType) ProtoMessage() {}

func (x *SignalUpdateGroupMemberType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUpdateGroupMemberType.ProtoReflect.Descriptor instead.
func (*SignalUpdateGroupMemberType) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{10}
}

func (x *SignalUpdateGroupMemberType) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalUpdateGroupMemberType) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SignalUpdateGroupMemberType) GetType() MemberType {
	if x != nil {
		return x.Type
	}
	return MemberType_Normal
}

func (x *SignalUpdateGroupMemberType) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalUpdateGroupMemberMuteTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group    int64    `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Uid      []string `protobuf:"bytes,2,rep,name=uid,proto3" json:"uid,omitempty"`
	MuteTime int64    `protobuf:"varint,3,opt,name=muteTime,proto3" json:"muteTime,omitempty"`
	Time     int64    `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalUpdateGroupMemberMuteTime) Reset() {
	*x = SignalUpdateGroupMemberMuteTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUpdateGroupMemberMuteTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUpdateGroupMemberMuteTime) ProtoMessage() {}

func (x *SignalUpdateGroupMemberMuteTime) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUpdateGroupMemberMuteTime.ProtoReflect.Descriptor instead.
func (*SignalUpdateGroupMemberMuteTime) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{11}
}

func (x *SignalUpdateGroupMemberMuteTime) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalUpdateGroupMemberMuteTime) GetUid() []string {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *SignalUpdateGroupMemberMuteTime) GetMuteTime() int64 {
	if x != nil {
		return x.MuteTime
	}
	return 0
}

func (x *SignalUpdateGroupMemberMuteTime) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalUpdateGroupName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group int64  `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Time  int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalUpdateGroupName) Reset() {
	*x = SignalUpdateGroupName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUpdateGroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUpdateGroupName) ProtoMessage() {}

func (x *SignalUpdateGroupName) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUpdateGroupName.ProtoReflect.Descriptor instead.
func (*SignalUpdateGroupName) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{12}
}

func (x *SignalUpdateGroupName) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalUpdateGroupName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignalUpdateGroupName) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalUpdateGroupAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group  int64  `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Avatar string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Time   int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SignalUpdateGroupAvatar) Reset() {
	*x = SignalUpdateGroupAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalUpdateGroupAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalUpdateGroupAvatar) ProtoMessage() {}

func (x *SignalUpdateGroupAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalUpdateGroupAvatar.ProtoReflect.Descriptor instead.
func (*SignalUpdateGroupAvatar) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{13}
}

func (x *SignalUpdateGroupAvatar) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *SignalUpdateGroupAvatar) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SignalUpdateGroupAvatar) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SignalStartCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId int64 `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *SignalStartCall) Reset() {
	*x = SignalStartCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalStartCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalStartCall) ProtoMessage() {}

func (x *SignalStartCall) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalStartCall.ProtoReflect.Descriptor instead.
func (*SignalStartCall) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{14}
}

func (x *SignalStartCall) GetTraceId() int64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

type SignalAcceptCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId       int64  `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	RoomId        int32  `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Uid           string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	UserSig       string `protobuf:"bytes,4,opt,name=user_sig,json=userSig,proto3" json:"user_sig,omitempty"`
	PrivateMapKey string `protobuf:"bytes,5,opt,name=private_map_key,json=privateMapKey,proto3" json:"private_map_key,omitempty"`
	SkdAppId      int32  `protobuf:"varint,6,opt,name=skd_app_id,json=skdAppId,proto3" json:"skd_app_id,omitempty"`
}

func (x *SignalAcceptCall) Reset() {
	*x = SignalAcceptCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalAcceptCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalAcceptCall) ProtoMessage() {}

func (x *SignalAcceptCall) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalAcceptCall.ProtoReflect.Descriptor instead.
func (*SignalAcceptCall) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{15}
}

func (x *SignalAcceptCall) GetTraceId() int64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *SignalAcceptCall) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SignalAcceptCall) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SignalAcceptCall) GetUserSig() string {
	if x != nil {
		return x.UserSig
	}
	return ""
}

func (x *SignalAcceptCall) GetPrivateMapKey() string {
	if x != nil {
		return x.PrivateMapKey
	}
	return ""
}

func (x *SignalAcceptCall) GetSkdAppId() int32 {
	if x != nil {
		return x.SkdAppId
	}
	return 0
}

type SignalStopCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId int64        `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Reason  StopCallType `protobuf:"varint,2,opt,name=reason,proto3,enum=dtalk.api.proto.StopCallType" json:"reason,omitempty"`
}

func (x *SignalStopCall) Reset() {
	*x = SignalStopCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalStopCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalStopCall) ProtoMessage() {}

func (x *SignalStopCall) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalStopCall.ProtoReflect.Descriptor instead.
func (*SignalStopCall) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{16}
}

func (x *SignalStopCall) GetTraceId() int64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *SignalStopCall) GetReason() StopCallType {
	if x != nil {
		return x.Reason
	}
	return StopCallType_Busy
}

type SignalRevoke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid      int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Self     bool   `protobuf:"varint,3,opt,name=self,proto3" json:"self,omitempty"`
}

func (x *SignalRevoke) Reset() {
	*x = SignalRevoke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalRevoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRevoke) ProtoMessage() {}

func (x *SignalRevoke) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRevoke.ProtoReflect.Descriptor instead.
func (*SignalRevoke) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP(), []int{17}
}

func (x *SignalRevoke) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *SignalRevoke) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SignalRevoke) GetSelf() bool {
	if x != nil {
		return x.Self
	}
	return false
}

var File_github_com_txchat_dtalk_api_proto_signal_proto protoreflect.FileDescriptor

var file_github_com_txchat_dtalk_api_proto_signal_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78,
	0x63, 0x68, 0x61, 0x74, 0x2f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4d, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x24,
	0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a,
	0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x1b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a,
	0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x79, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x2c, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb9, 0x01,
	0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x73,
	0x6b, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x6b, 0x64, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x0e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x50, 0x0a,
	0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x2a,
	0xdf, 0x02, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x69, 0x67,
	0x6e, 0x4f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x0d, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10,
	0x0e, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x16, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x19, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x10, 0x20, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x10,
	0x21, 0x2a, 0x36, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x6f,
	0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x0a, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x65, 0x6e, 0x79, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x79, 0x10,
	0x01, 0x2a, 0x2e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10,
	0x02, 0x2a, 0x49, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x75, 0x73, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x04, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x3b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescOnce sync.Once
	file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescData = file_github_com_txchat_dtalk_api_proto_signal_proto_rawDesc
)

func file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescGZIP() []byte {
	file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescOnce.Do(func() {
		file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescData)
	})
	return file_github_com_txchat_dtalk_api_proto_signal_proto_rawDescData
}

var file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_github_com_txchat_dtalk_api_proto_signal_proto_goTypes = []interface{}{
	(SignalType)(0),                         // 0: dtalk.api.proto.SignalType
	(JoinType)(0),                           // 1: dtalk.api.proto.JoinType
	(FriendType)(0),                         // 2: dtalk.api.proto.FriendType
	(MuteType)(0),                           // 3: dtalk.api.proto.MuteType
	(MemberType)(0),                         // 4: dtalk.api.proto.MemberType
	(StopCallType)(0),                       // 5: dtalk.api.proto.StopCallType
	(*Signal)(nil),                          // 6: dtalk.api.proto.Signal
	(*SignalReceived)(nil),                  // 7: dtalk.api.proto.SignalReceived
	(*SignalSignInGroup)(nil),               // 8: dtalk.api.proto.SignalSignInGroup
	(*SignalSignOutGroup)(nil),              // 9: dtalk.api.proto.SignalSignOutGroup
	(*SignalDeleteGroup)(nil),               // 10: dtalk.api.proto.SignalDeleteGroup
	(*SignalFocusMessage)(nil),              // 11: dtalk.api.proto.SignalFocusMessage
	(*SignalEndpointLogin)(nil),             // 12: dtalk.api.proto.SignalEndpointLogin
	(*SignalUpdateGroupJoinType)(nil),       // 13: dtalk.api.proto.SignalUpdateGroupJoinType
	(*SignalUpdateGroupFriendType)(nil),     // 14: dtalk.api.proto.SignalUpdateGroupFriendType
	(*SignalUpdateGroupMuteType)(nil),       // 15: dtalk.api.proto.SignalUpdateGroupMuteType
	(*SignalUpdateGroupMemberType)(nil),     // 16: dtalk.api.proto.SignalUpdateGroupMemberType
	(*SignalUpdateGroupMemberMuteTime)(nil), // 17: dtalk.api.proto.SignalUpdateGroupMemberMuteTime
	(*SignalUpdateGroupName)(nil),           // 18: dtalk.api.proto.SignalUpdateGroupName
	(*SignalUpdateGroupAvatar)(nil),         // 19: dtalk.api.proto.SignalUpdateGroupAvatar
	(*SignalStartCall)(nil),                 // 20: dtalk.api.proto.SignalStartCall
	(*SignalAcceptCall)(nil),                // 21: dtalk.api.proto.SignalAcceptCall
	(*SignalStopCall)(nil),                  // 22: dtalk.api.proto.SignalStopCall
	(*SignalRevoke)(nil),                    // 23: dtalk.api.proto.SignalRevoke
	(auth.Device)(0),                        // 24: dtalk.api.proto.Device
}
var file_github_com_txchat_dtalk_api_proto_signal_proto_depIdxs = []int32{
	0,  // 0: dtalk.api.proto.Signal.type:type_name -> dtalk.api.proto.SignalType
	24, // 1: dtalk.api.proto.SignalEndpointLogin.device:type_name -> dtalk.api.proto.Device
	1,  // 2: dtalk.api.proto.SignalUpdateGroupJoinType.type:type_name -> dtalk.api.proto.JoinType
	2,  // 3: dtalk.api.proto.SignalUpdateGroupFriendType.type:type_name -> dtalk.api.proto.FriendType
	3,  // 4: dtalk.api.proto.SignalUpdateGroupMuteType.type:type_name -> dtalk.api.proto.MuteType
	4,  // 5: dtalk.api.proto.SignalUpdateGroupMemberType.type:type_name -> dtalk.api.proto.MemberType
	5,  // 6: dtalk.api.proto.SignalStopCall.reason:type_name -> dtalk.api.proto.StopCallType
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_github_com_txchat_dtalk_api_proto_signal_proto_init() }
func file_github_com_txchat_dtalk_api_proto_signal_proto_init() {
	if File_github_com_txchat_dtalk_api_proto_signal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSignInGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSignOutGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalDeleteGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalFocusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalEndpointLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUpdateGroupJoinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUpdateGroupFriendType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUpdateGroupMuteType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUpdateGroupMemberType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUpdateGroupMemberMuteTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUpdateGroupName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalUpdateGroupAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalStartCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalAcceptCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalStopCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalRevoke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_txchat_dtalk_api_proto_signal_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_txchat_dtalk_api_proto_signal_proto_goTypes,
		DependencyIndexes: file_github_com_txchat_dtalk_api_proto_signal_proto_depIdxs,
		EnumInfos:         file_github_com_txchat_dtalk_api_proto_signal_proto_enumTypes,
		MessageInfos:      file_github_com_txchat_dtalk_api_proto_signal_proto_msgTypes,
	}.Build()
	File_github_com_txchat_dtalk_api_proto_signal_proto = out.File
	file_github_com_txchat_dtalk_api_proto_signal_proto_rawDesc = nil
	file_github_com_txchat_dtalk_api_proto_signal_proto_goTypes = nil
	file_github_com_txchat_dtalk_api_proto_signal_proto_depIdxs = nil
}
