// protoc -I=. -I=$GOPATH/src --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: github.com/txchat/dtalk/api/proto/message.proto

package message

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Channel int32

const (
	Channel_Private Channel = 0
	Channel_Group   Channel = 1
)

// Enum value maps for Channel.
var (
	Channel_name = map[int32]string{
		0: "Private",
		1: "Group",
	}
	Channel_value = map[string]int32{
		"Private": 0,
		"Group":   1,
	}
)

func (x Channel) Enum() *Channel {
	p := new(Channel)
	*p = x
	return p
}

func (x Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_message_proto_enumTypes[0].Descriptor()
}

func (Channel) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_message_proto_enumTypes[0]
}

func (x Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel.Descriptor instead.
func (Channel) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_message_proto_rawDescGZIP(), []int{0}
}

// common msg define
type MsgType int32

const (
	MsgType_System      MsgType = 0
	MsgType_Text        MsgType = 1
	MsgType_Audio       MsgType = 2
	MsgType_Image       MsgType = 3
	MsgType_Video       MsgType = 4
	MsgType_File        MsgType = 5
	MsgType_Card        MsgType = 6
	MsgType_Notice      MsgType = 7
	MsgType_Forward     MsgType = 8
	MsgType_RTCCall     MsgType = 9
	MsgType_Transfer    MsgType = 10
	MsgType_Collect     MsgType = 11
	MsgType_RedPacket   MsgType = 12
	MsgType_ContactCard MsgType = 13
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:  "System",
		1:  "Text",
		2:  "Audio",
		3:  "Image",
		4:  "Video",
		5:  "File",
		6:  "Card",
		7:  "Notice",
		8:  "Forward",
		9:  "RTCCall",
		10: "Transfer",
		11: "Collect",
		12: "RedPacket",
		13: "ContactCard",
	}
	MsgType_value = map[string]int32{
		"System":      0,
		"Text":        1,
		"Audio":       2,
		"Image":       3,
		"Video":       4,
		"File":        5,
		"Card":        6,
		"Notice":      7,
		"Forward":     8,
		"RTCCall":     9,
		"Transfer":    10,
		"Collect":     11,
		"RedPacket":   12,
		"ContactCard": 13,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_txchat_dtalk_api_proto_message_proto_enumTypes[1].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_github_com_txchat_dtalk_api_proto_message_proto_enumTypes[1]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_message_proto_rawDescGZIP(), []int{1}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType Channel    `protobuf:"varint,1,opt,name=channelType,proto3,enum=dtalk.api.proto.Channel" json:"channelType,omitempty"`
	Mid         string     `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Cid         string     `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	From        string     `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Target      string     `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	MsgType     MsgType    `protobuf:"varint,6,opt,name=msgType,proto3,enum=dtalk.api.proto.MsgType" json:"msgType,omitempty"`
	Content     []byte     `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	Datetime    int64      `protobuf:"varint,8,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Source      *Source    `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	Reference   *Reference `protobuf:"bytes,10,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetChannelType() Channel {
	if x != nil {
		return x.ChannelType
	}
	return Channel_Private
}

func (x *Message) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *Message) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Message) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Message) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Message) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_System
}

func (x *Message) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetDatetime() int64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *Message) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Message) GetReference() *Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType Channel     `protobuf:"varint,1,opt,name=channelType,proto3,enum=dtalk.api.proto.Channel" json:"channelType,omitempty"`
	From        *SourceUser `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Target      *SourceUser `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_message_proto_rawDescGZIP(), []int{1}
}

func (x *Source) GetChannelType() Channel {
	if x != nil {
		return x.ChannelType
	}
	return Channel_Private
}

func (x *Source) GetFrom() *SourceUser {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Source) GetTarget() *SourceUser {
	if x != nil {
		return x.Target
	}
	return nil
}

type SourceUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SourceUser) Reset() {
	*x = SourceUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceUser) ProtoMessage() {}

func (x *SourceUser) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceUser.ProtoReflect.Descriptor instead.
func (*SourceUser) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_message_proto_rawDescGZIP(), []int{2}
}

func (x *SourceUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SourceUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic int64 `protobuf:"varint,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Ref   int64 `protobuf:"varint,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_github_com_txchat_dtalk_api_proto_message_proto_rawDescGZIP(), []int{3}
}

func (x *Reference) GetTopic() int64 {
	if x != nil {
		return x.Topic
	}
	return 0
}

func (x *Reference) GetRef() int64 {
	if x != nil {
		return x.Ref
	}
	return 0
}

var File_github_com_txchat_dtalk_api_proto_message_proto protoreflect.FileDescriptor

var file_github_com_txchat_dtalk_api_proto_message_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xea, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x30, 0x0a, 0x0a,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33,
	0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x2a, 0x21, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x2a, 0xb5, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x43, 0x43, 0x61, 0x6c,
	0x6c, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x0b, 0x12, 0x0d,
	0x0a, 0x09, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x0c, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0d, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_txchat_dtalk_api_proto_message_proto_rawDescOnce sync.Once
	file_github_com_txchat_dtalk_api_proto_message_proto_rawDescData = file_github_com_txchat_dtalk_api_proto_message_proto_rawDesc
)

func file_github_com_txchat_dtalk_api_proto_message_proto_rawDescGZIP() []byte {
	file_github_com_txchat_dtalk_api_proto_message_proto_rawDescOnce.Do(func() {
		file_github_com_txchat_dtalk_api_proto_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_txchat_dtalk_api_proto_message_proto_rawDescData)
	})
	return file_github_com_txchat_dtalk_api_proto_message_proto_rawDescData
}

var file_github_com_txchat_dtalk_api_proto_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_txchat_dtalk_api_proto_message_proto_goTypes = []interface{}{
	(Channel)(0),       // 0: dtalk.api.proto.Channel
	(MsgType)(0),       // 1: dtalk.api.proto.MsgType
	(*Message)(nil),    // 2: dtalk.api.proto.Message
	(*Source)(nil),     // 3: dtalk.api.proto.Source
	(*SourceUser)(nil), // 4: dtalk.api.proto.SourceUser
	(*Reference)(nil),  // 5: dtalk.api.proto.Reference
}
var file_github_com_txchat_dtalk_api_proto_message_proto_depIdxs = []int32{
	0, // 0: dtalk.api.proto.Message.channelType:type_name -> dtalk.api.proto.Channel
	1, // 1: dtalk.api.proto.Message.msgType:type_name -> dtalk.api.proto.MsgType
	3, // 2: dtalk.api.proto.Message.source:type_name -> dtalk.api.proto.Source
	5, // 3: dtalk.api.proto.Message.reference:type_name -> dtalk.api.proto.Reference
	0, // 4: dtalk.api.proto.Source.channelType:type_name -> dtalk.api.proto.Channel
	4, // 5: dtalk.api.proto.Source.from:type_name -> dtalk.api.proto.SourceUser
	4, // 6: dtalk.api.proto.Source.target:type_name -> dtalk.api.proto.SourceUser
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_github_com_txchat_dtalk_api_proto_message_proto_init() }
func file_github_com_txchat_dtalk_api_proto_message_proto_init() {
	if File_github_com_txchat_dtalk_api_proto_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_txchat_dtalk_api_proto_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_txchat_dtalk_api_proto_message_proto_goTypes,
		DependencyIndexes: file_github_com_txchat_dtalk_api_proto_message_proto_depIdxs,
		EnumInfos:         file_github_com_txchat_dtalk_api_proto_message_proto_enumTypes,
		MessageInfos:      file_github_com_txchat_dtalk_api_proto_message_proto_msgTypes,
	}.Build()
	File_github_com_txchat_dtalk_api_proto_message_proto = out.File
	file_github_com_txchat_dtalk_api_proto_message_proto_rawDesc = nil
	file_github_com_txchat_dtalk_api_proto_message_proto_goTypes = nil
	file_github_com_txchat_dtalk_api_proto_message_proto_depIdxs = nil
}
