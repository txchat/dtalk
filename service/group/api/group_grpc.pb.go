// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package group

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClient interface {
	GetGroupIds(ctx context.Context, in *GetGroupIdsRequest, opts ...grpc.CallOption) (*GetGroupIdsReply, error)
	CheckInGroup(ctx context.Context, in *CheckInGroupRequest, opts ...grpc.CallOption) (*CheckInGroupReply, error)
	GetMemberIds(ctx context.Context, in *GetMemberIdsRequest, opts ...grpc.CallOption) (*GetMemberIdsReply, error)
	CheckMute(ctx context.Context, in *CheckMuteRequest, opts ...grpc.CallOption) (*CheckMuteReply, error)
	// 得到加入的所有群
	GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error)
	// 查询成员
	GetMember(ctx context.Context, in *GetMemberReq, opts ...grpc.CallOption) (*GetMemberResp, error)
	// 查询群信息
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error)
	// 创建群聊
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	// 创建藏品群
	CreateNFTGroup(ctx context.Context, in *CreateNFTGroupReq, opts ...grpc.CallOption) (*CreateNFTGroupResp, error)
	// 邀请新成员
	InviteGroupMembers(ctx context.Context, in *InviteGroupMembersReq, opts ...grpc.CallOption) (*InviteGroupMembersResp, error)
	// 退出群
	GroupExit(ctx context.Context, in *GroupExitReq, opts ...grpc.CallOption) (*GroupExitResp, error)
	// 解散群
	GroupDisband(ctx context.Context, in *GroupDisbandReq, opts ...grpc.CallOption) (*GroupDisbandResp, error)
	// 踢人
	GroupRemove(ctx context.Context, in *GroupRemoveReq, opts ...grpc.CallOption) (*GroupRemoveResp, error)
	// 转让群主
	ChangeOwner(ctx context.Context, in *ChangeOwnerReq, opts ...grpc.CallOption) (*ChangeOwnerResp, error)
	// 更新群名称
	UpdateGroupName(ctx context.Context, in *UpdateGroupNameReq, opts ...grpc.CallOption) (*UpdateGroupNameResp, error)
	// 更新群头像
	UpdateGroupAvatar(ctx context.Context, in *UpdateGroupAvatarReq, opts ...grpc.CallOption) (*UpdateGroupAvatarResp, error)
	// 更新加群设置
	UpdateGroupJoinType(ctx context.Context, in *UpdateGroupJoinTypeReq, opts ...grpc.CallOption) (*UpdateGroupJoinTypeResp, error)
	// 更新群内加好友设置
	UpdateGroupFriendType(ctx context.Context, in *UpdateGroupFriendTypeReq, opts ...grpc.CallOption) (*UpdateGroupFriendTypeResp, error)
	// 更新群内禁言设置
	UpdateGroupMuteType(ctx context.Context, in *UpdateGroupMuteTypeReq, opts ...grpc.CallOption) (*UpdateGroupMuteTypeResp, error)
	// 更新群内昵称
	UpdateGroupMemberName(ctx context.Context, in *UpdateGroupMemberNameReq, opts ...grpc.CallOption) (*UpdateGroupMemberNameResp, error)
	// 设置群管理员
	SetAdmin(ctx context.Context, in *SetAdminReq, opts ...grpc.CallOption) (*SetAdminResp, error)
	// 设置群成员禁言时间
	UpdateGroupMemberMuteTime(ctx context.Context, in *UpdateGroupMemberMuteTimeReq, opts ...grpc.CallOption) (*UpdateGroupMemberMuteTimeResp, error)
	// 查询完整群信息
	GetPriGroupInfo(ctx context.Context, in *GetPriGroupInfoReq, opts ...grpc.CallOption) (*GetPriGroupInfoResp, error)
	// 查询群公开信息
	GetPubGroupInfo(ctx context.Context, in *GetPubGroupInfoReq, opts ...grpc.CallOption) (*GetPubGroupInfoResp, error)
	// 查询加入的群列表
	GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...grpc.CallOption) (*GetGroupListResp, error)
	// 查询群成员列表
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error)
	// 查询群成员信息
	GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoReq, opts ...grpc.CallOption) (*GetGroupMemberInfoResp, error)
	// 查询群内禁言列表
	GetMuteList(ctx context.Context, in *GetMuteListReq, opts ...grpc.CallOption) (*GetMuteListResp, error)
	// 查询NFT群拓展信息
	GetNFTGroupExtInfo(ctx context.Context, in *GetNFTGroupExtInfoReq, opts ...grpc.CallOption) (*GetNFTGroupExtInfoResp, error)
	// 更新群类型
	ForceUpdateGroupType(ctx context.Context, in *ForceUpdateGroupTypeReq, opts ...grpc.CallOption) (*ForceUpdateGroupTypeResp, error)
	// 解散群, 强制解散
	ForceDisbandGroup(ctx context.Context, in *ForceDisbandGroupReq, opts ...grpc.CallOption) (*ForceDisbandGroupResp, error)
	// 添加成员
	ForceAddMember(ctx context.Context, in *ForceAddMemberReq, opts ...grpc.CallOption) (*ForceAddMemberResp, error)
	// 批量添加成员
	ForceAddMembers(ctx context.Context, in *ForceAddMembersReq, opts ...grpc.CallOption) (*ForceAddMembersResp, error)
	// 删除成员
	ForceDeleteMember(ctx context.Context, in *ForceDeleteMemberReq, opts ...grpc.CallOption) (*ForceDeleteMemberResp, error)
	// 批量删除成员
	ForceDeleteMembers(ctx context.Context, in *ForceDeleteMembersReq, opts ...grpc.CallOption) (*ForceDeleteMembersResp, error)
	// 一个人加入多个群
	ForceJoinGroups(ctx context.Context, in *ForceJoinGroupsReq, opts ...grpc.CallOption) (*ForceJoinGroupsResp, error)
	// 一个人退出多个群
	ForceExitGroups(ctx context.Context, in *ForceExitGroupsReq, opts ...grpc.CallOption) (*ForceExitGroupsResp, error)
	// 成为群主
	ForceChangeOwner(ctx context.Context, in *ForceChangeOwnerReq, opts ...grpc.CallOption) (*ForceChangeOwnerResp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) GetGroupIds(ctx context.Context, in *GetGroupIdsRequest, opts ...grpc.CallOption) (*GetGroupIdsReply, error) {
	out := new(GetGroupIdsReply)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetGroupIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CheckInGroup(ctx context.Context, in *CheckInGroupRequest, opts ...grpc.CallOption) (*CheckInGroupReply, error) {
	out := new(CheckInGroupReply)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/CheckInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetMemberIds(ctx context.Context, in *GetMemberIdsRequest, opts ...grpc.CallOption) (*GetMemberIdsReply, error) {
	out := new(GetMemberIdsReply)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetMemberIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CheckMute(ctx context.Context, in *CheckMuteRequest, opts ...grpc.CallOption) (*CheckMuteReply, error) {
	out := new(CheckMuteReply)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/CheckMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsResp, error) {
	out := new(GetGroupsResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetMember(ctx context.Context, in *GetMemberReq, opts ...grpc.CallOption) (*GetMemberResp, error) {
	out := new(GetMemberResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error) {
	out := new(GetGroupInfoResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreateNFTGroup(ctx context.Context, in *CreateNFTGroupReq, opts ...grpc.CallOption) (*CreateNFTGroupResp, error) {
	out := new(CreateNFTGroupResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/CreateNFTGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InviteGroupMembers(ctx context.Context, in *InviteGroupMembersReq, opts ...grpc.CallOption) (*InviteGroupMembersResp, error) {
	out := new(InviteGroupMembersResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/InviteGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupExit(ctx context.Context, in *GroupExitReq, opts ...grpc.CallOption) (*GroupExitResp, error) {
	out := new(GroupExitResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GroupExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupDisband(ctx context.Context, in *GroupDisbandReq, opts ...grpc.CallOption) (*GroupDisbandResp, error) {
	out := new(GroupDisbandResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GroupDisband", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupRemove(ctx context.Context, in *GroupRemoveReq, opts ...grpc.CallOption) (*GroupRemoveResp, error) {
	out := new(GroupRemoveResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GroupRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ChangeOwner(ctx context.Context, in *ChangeOwnerReq, opts ...grpc.CallOption) (*ChangeOwnerResp, error) {
	out := new(ChangeOwnerResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ChangeOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupName(ctx context.Context, in *UpdateGroupNameReq, opts ...grpc.CallOption) (*UpdateGroupNameResp, error) {
	out := new(UpdateGroupNameResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/UpdateGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupAvatar(ctx context.Context, in *UpdateGroupAvatarReq, opts ...grpc.CallOption) (*UpdateGroupAvatarResp, error) {
	out := new(UpdateGroupAvatarResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/UpdateGroupAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupJoinType(ctx context.Context, in *UpdateGroupJoinTypeReq, opts ...grpc.CallOption) (*UpdateGroupJoinTypeResp, error) {
	out := new(UpdateGroupJoinTypeResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/UpdateGroupJoinType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupFriendType(ctx context.Context, in *UpdateGroupFriendTypeReq, opts ...grpc.CallOption) (*UpdateGroupFriendTypeResp, error) {
	out := new(UpdateGroupFriendTypeResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/UpdateGroupFriendType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupMuteType(ctx context.Context, in *UpdateGroupMuteTypeReq, opts ...grpc.CallOption) (*UpdateGroupMuteTypeResp, error) {
	out := new(UpdateGroupMuteTypeResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/UpdateGroupMuteType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupMemberName(ctx context.Context, in *UpdateGroupMemberNameReq, opts ...grpc.CallOption) (*UpdateGroupMemberNameResp, error) {
	out := new(UpdateGroupMemberNameResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/UpdateGroupMemberName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetAdmin(ctx context.Context, in *SetAdminReq, opts ...grpc.CallOption) (*SetAdminResp, error) {
	out := new(SetAdminResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/SetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupMemberMuteTime(ctx context.Context, in *UpdateGroupMemberMuteTimeReq, opts ...grpc.CallOption) (*UpdateGroupMemberMuteTimeResp, error) {
	out := new(UpdateGroupMemberMuteTimeResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/UpdateGroupMemberMuteTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetPriGroupInfo(ctx context.Context, in *GetPriGroupInfoReq, opts ...grpc.CallOption) (*GetPriGroupInfoResp, error) {
	out := new(GetPriGroupInfoResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetPriGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetPubGroupInfo(ctx context.Context, in *GetPubGroupInfoReq, opts ...grpc.CallOption) (*GetPubGroupInfoResp, error) {
	out := new(GetPubGroupInfoResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetPubGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...grpc.CallOption) (*GetGroupListResp, error) {
	out := new(GetGroupListResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error) {
	out := new(GetGroupMemberListResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetGroupMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoReq, opts ...grpc.CallOption) (*GetGroupMemberInfoResp, error) {
	out := new(GetGroupMemberInfoResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetGroupMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetMuteList(ctx context.Context, in *GetMuteListReq, opts ...grpc.CallOption) (*GetMuteListResp, error) {
	out := new(GetMuteListResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetMuteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetNFTGroupExtInfo(ctx context.Context, in *GetNFTGroupExtInfoReq, opts ...grpc.CallOption) (*GetNFTGroupExtInfoResp, error) {
	out := new(GetNFTGroupExtInfoResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/GetNFTGroupExtInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceUpdateGroupType(ctx context.Context, in *ForceUpdateGroupTypeReq, opts ...grpc.CallOption) (*ForceUpdateGroupTypeResp, error) {
	out := new(ForceUpdateGroupTypeResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceUpdateGroupType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceDisbandGroup(ctx context.Context, in *ForceDisbandGroupReq, opts ...grpc.CallOption) (*ForceDisbandGroupResp, error) {
	out := new(ForceDisbandGroupResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceDisbandGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceAddMember(ctx context.Context, in *ForceAddMemberReq, opts ...grpc.CallOption) (*ForceAddMemberResp, error) {
	out := new(ForceAddMemberResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceAddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceAddMembers(ctx context.Context, in *ForceAddMembersReq, opts ...grpc.CallOption) (*ForceAddMembersResp, error) {
	out := new(ForceAddMembersResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceAddMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceDeleteMember(ctx context.Context, in *ForceDeleteMemberReq, opts ...grpc.CallOption) (*ForceDeleteMemberResp, error) {
	out := new(ForceDeleteMemberResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceDeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceDeleteMembers(ctx context.Context, in *ForceDeleteMembersReq, opts ...grpc.CallOption) (*ForceDeleteMembersResp, error) {
	out := new(ForceDeleteMembersResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceDeleteMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceJoinGroups(ctx context.Context, in *ForceJoinGroupsReq, opts ...grpc.CallOption) (*ForceJoinGroupsResp, error) {
	out := new(ForceJoinGroupsResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceJoinGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceExitGroups(ctx context.Context, in *ForceExitGroupsReq, opts ...grpc.CallOption) (*ForceExitGroupsResp, error) {
	out := new(ForceExitGroupsResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceExitGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ForceChangeOwner(ctx context.Context, in *ForceChangeOwnerReq, opts ...grpc.CallOption) (*ForceChangeOwnerResp, error) {
	out := new(ForceChangeOwnerResp)
	err := c.cc.Invoke(ctx, "/dtalk.group.Group/ForceChangeOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility
type GroupServer interface {
	GetGroupIds(context.Context, *GetGroupIdsRequest) (*GetGroupIdsReply, error)
	CheckInGroup(context.Context, *CheckInGroupRequest) (*CheckInGroupReply, error)
	GetMemberIds(context.Context, *GetMemberIdsRequest) (*GetMemberIdsReply, error)
	CheckMute(context.Context, *CheckMuteRequest) (*CheckMuteReply, error)
	// 得到加入的所有群
	GetGroups(context.Context, *GetGroupsReq) (*GetGroupsResp, error)
	// 查询成员
	GetMember(context.Context, *GetMemberReq) (*GetMemberResp, error)
	// 查询群信息
	GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoResp, error)
	// 创建群聊
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	// 创建藏品群
	CreateNFTGroup(context.Context, *CreateNFTGroupReq) (*CreateNFTGroupResp, error)
	// 邀请新成员
	InviteGroupMembers(context.Context, *InviteGroupMembersReq) (*InviteGroupMembersResp, error)
	// 退出群
	GroupExit(context.Context, *GroupExitReq) (*GroupExitResp, error)
	// 解散群
	GroupDisband(context.Context, *GroupDisbandReq) (*GroupDisbandResp, error)
	// 踢人
	GroupRemove(context.Context, *GroupRemoveReq) (*GroupRemoveResp, error)
	// 转让群主
	ChangeOwner(context.Context, *ChangeOwnerReq) (*ChangeOwnerResp, error)
	// 更新群名称
	UpdateGroupName(context.Context, *UpdateGroupNameReq) (*UpdateGroupNameResp, error)
	// 更新群头像
	UpdateGroupAvatar(context.Context, *UpdateGroupAvatarReq) (*UpdateGroupAvatarResp, error)
	// 更新加群设置
	UpdateGroupJoinType(context.Context, *UpdateGroupJoinTypeReq) (*UpdateGroupJoinTypeResp, error)
	// 更新群内加好友设置
	UpdateGroupFriendType(context.Context, *UpdateGroupFriendTypeReq) (*UpdateGroupFriendTypeResp, error)
	// 更新群内禁言设置
	UpdateGroupMuteType(context.Context, *UpdateGroupMuteTypeReq) (*UpdateGroupMuteTypeResp, error)
	// 更新群内昵称
	UpdateGroupMemberName(context.Context, *UpdateGroupMemberNameReq) (*UpdateGroupMemberNameResp, error)
	// 设置群管理员
	SetAdmin(context.Context, *SetAdminReq) (*SetAdminResp, error)
	// 设置群成员禁言时间
	UpdateGroupMemberMuteTime(context.Context, *UpdateGroupMemberMuteTimeReq) (*UpdateGroupMemberMuteTimeResp, error)
	// 查询完整群信息
	GetPriGroupInfo(context.Context, *GetPriGroupInfoReq) (*GetPriGroupInfoResp, error)
	// 查询群公开信息
	GetPubGroupInfo(context.Context, *GetPubGroupInfoReq) (*GetPubGroupInfoResp, error)
	// 查询加入的群列表
	GetGroupList(context.Context, *GetGroupListReq) (*GetGroupListResp, error)
	// 查询群成员列表
	GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GetGroupMemberListResp, error)
	// 查询群成员信息
	GetGroupMemberInfo(context.Context, *GetGroupMemberInfoReq) (*GetGroupMemberInfoResp, error)
	// 查询群内禁言列表
	GetMuteList(context.Context, *GetMuteListReq) (*GetMuteListResp, error)
	// 查询NFT群拓展信息
	GetNFTGroupExtInfo(context.Context, *GetNFTGroupExtInfoReq) (*GetNFTGroupExtInfoResp, error)
	// 更新群类型
	ForceUpdateGroupType(context.Context, *ForceUpdateGroupTypeReq) (*ForceUpdateGroupTypeResp, error)
	// 解散群, 强制解散
	ForceDisbandGroup(context.Context, *ForceDisbandGroupReq) (*ForceDisbandGroupResp, error)
	// 添加成员
	ForceAddMember(context.Context, *ForceAddMemberReq) (*ForceAddMemberResp, error)
	// 批量添加成员
	ForceAddMembers(context.Context, *ForceAddMembersReq) (*ForceAddMembersResp, error)
	// 删除成员
	ForceDeleteMember(context.Context, *ForceDeleteMemberReq) (*ForceDeleteMemberResp, error)
	// 批量删除成员
	ForceDeleteMembers(context.Context, *ForceDeleteMembersReq) (*ForceDeleteMembersResp, error)
	// 一个人加入多个群
	ForceJoinGroups(context.Context, *ForceJoinGroupsReq) (*ForceJoinGroupsResp, error)
	// 一个人退出多个群
	ForceExitGroups(context.Context, *ForceExitGroupsReq) (*ForceExitGroupsResp, error)
	// 成为群主
	ForceChangeOwner(context.Context, *ForceChangeOwnerReq) (*ForceChangeOwnerResp, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServer struct {
}

func (UnimplementedGroupServer) GetGroupIds(context.Context, *GetGroupIdsRequest) (*GetGroupIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupIds not implemented")
}
func (UnimplementedGroupServer) CheckInGroup(context.Context, *CheckInGroupRequest) (*CheckInGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInGroup not implemented")
}
func (UnimplementedGroupServer) GetMemberIds(context.Context, *GetMemberIdsRequest) (*GetMemberIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberIds not implemented")
}
func (UnimplementedGroupServer) CheckMute(context.Context, *CheckMuteRequest) (*CheckMuteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMute not implemented")
}
func (UnimplementedGroupServer) GetGroups(context.Context, *GetGroupsReq) (*GetGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedGroupServer) GetMember(context.Context, *GetMemberReq) (*GetMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedGroupServer) GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedGroupServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServer) CreateNFTGroup(context.Context, *CreateNFTGroupReq) (*CreateNFTGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNFTGroup not implemented")
}
func (UnimplementedGroupServer) InviteGroupMembers(context.Context, *InviteGroupMembersReq) (*InviteGroupMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteGroupMembers not implemented")
}
func (UnimplementedGroupServer) GroupExit(context.Context, *GroupExitReq) (*GroupExitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupExit not implemented")
}
func (UnimplementedGroupServer) GroupDisband(context.Context, *GroupDisbandReq) (*GroupDisbandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDisband not implemented")
}
func (UnimplementedGroupServer) GroupRemove(context.Context, *GroupRemoveReq) (*GroupRemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRemove not implemented")
}
func (UnimplementedGroupServer) ChangeOwner(context.Context, *ChangeOwnerReq) (*ChangeOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOwner not implemented")
}
func (UnimplementedGroupServer) UpdateGroupName(context.Context, *UpdateGroupNameReq) (*UpdateGroupNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupName not implemented")
}
func (UnimplementedGroupServer) UpdateGroupAvatar(context.Context, *UpdateGroupAvatarReq) (*UpdateGroupAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupAvatar not implemented")
}
func (UnimplementedGroupServer) UpdateGroupJoinType(context.Context, *UpdateGroupJoinTypeReq) (*UpdateGroupJoinTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupJoinType not implemented")
}
func (UnimplementedGroupServer) UpdateGroupFriendType(context.Context, *UpdateGroupFriendTypeReq) (*UpdateGroupFriendTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupFriendType not implemented")
}
func (UnimplementedGroupServer) UpdateGroupMuteType(context.Context, *UpdateGroupMuteTypeReq) (*UpdateGroupMuteTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupMuteType not implemented")
}
func (UnimplementedGroupServer) UpdateGroupMemberName(context.Context, *UpdateGroupMemberNameReq) (*UpdateGroupMemberNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupMemberName not implemented")
}
func (UnimplementedGroupServer) SetAdmin(context.Context, *SetAdminReq) (*SetAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdmin not implemented")
}
func (UnimplementedGroupServer) UpdateGroupMemberMuteTime(context.Context, *UpdateGroupMemberMuteTimeReq) (*UpdateGroupMemberMuteTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupMemberMuteTime not implemented")
}
func (UnimplementedGroupServer) GetPriGroupInfo(context.Context, *GetPriGroupInfoReq) (*GetPriGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriGroupInfo not implemented")
}
func (UnimplementedGroupServer) GetPubGroupInfo(context.Context, *GetPubGroupInfoReq) (*GetPubGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubGroupInfo not implemented")
}
func (UnimplementedGroupServer) GetGroupList(context.Context, *GetGroupListReq) (*GetGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (UnimplementedGroupServer) GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GetGroupMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberList not implemented")
}
func (UnimplementedGroupServer) GetGroupMemberInfo(context.Context, *GetGroupMemberInfoReq) (*GetGroupMemberInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberInfo not implemented")
}
func (UnimplementedGroupServer) GetMuteList(context.Context, *GetMuteListReq) (*GetMuteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMuteList not implemented")
}
func (UnimplementedGroupServer) GetNFTGroupExtInfo(context.Context, *GetNFTGroupExtInfoReq) (*GetNFTGroupExtInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNFTGroupExtInfo not implemented")
}
func (UnimplementedGroupServer) ForceUpdateGroupType(context.Context, *ForceUpdateGroupTypeReq) (*ForceUpdateGroupTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceUpdateGroupType not implemented")
}
func (UnimplementedGroupServer) ForceDisbandGroup(context.Context, *ForceDisbandGroupReq) (*ForceDisbandGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceDisbandGroup not implemented")
}
func (UnimplementedGroupServer) ForceAddMember(context.Context, *ForceAddMemberReq) (*ForceAddMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceAddMember not implemented")
}
func (UnimplementedGroupServer) ForceAddMembers(context.Context, *ForceAddMembersReq) (*ForceAddMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceAddMembers not implemented")
}
func (UnimplementedGroupServer) ForceDeleteMember(context.Context, *ForceDeleteMemberReq) (*ForceDeleteMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceDeleteMember not implemented")
}
func (UnimplementedGroupServer) ForceDeleteMembers(context.Context, *ForceDeleteMembersReq) (*ForceDeleteMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceDeleteMembers not implemented")
}
func (UnimplementedGroupServer) ForceJoinGroups(context.Context, *ForceJoinGroupsReq) (*ForceJoinGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceJoinGroups not implemented")
}
func (UnimplementedGroupServer) ForceExitGroups(context.Context, *ForceExitGroupsReq) (*ForceExitGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceExitGroups not implemented")
}
func (UnimplementedGroupServer) ForceChangeOwner(context.Context, *ForceChangeOwnerReq) (*ForceChangeOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceChangeOwner not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_GetGroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetGroupIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupIds(ctx, req.(*GetGroupIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CheckInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CheckInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/CheckInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CheckInGroup(ctx, req.(*CheckInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetMemberIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetMemberIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetMemberIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetMemberIds(ctx, req.(*GetMemberIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CheckMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CheckMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/CheckMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CheckMute(ctx, req.(*CheckMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroups(ctx, req.(*GetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetMember(ctx, req.(*GetMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupInfo(ctx, req.(*GetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreateNFTGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNFTGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateNFTGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/CreateNFTGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateNFTGroup(ctx, req.(*CreateNFTGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InviteGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InviteGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/InviteGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InviteGroupMembers(ctx, req.(*InviteGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupExitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GroupExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupExit(ctx, req.(*GroupExitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupDisband_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDisbandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupDisband(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GroupDisband",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupDisband(ctx, req.(*GroupDisbandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GroupRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupRemove(ctx, req.(*GroupRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ChangeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ChangeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ChangeOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ChangeOwner(ctx, req.(*ChangeOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/UpdateGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupName(ctx, req.(*UpdateGroupNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/UpdateGroupAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupAvatar(ctx, req.(*UpdateGroupAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupJoinType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupJoinTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupJoinType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/UpdateGroupJoinType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupJoinType(ctx, req.(*UpdateGroupJoinTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupFriendType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupFriendTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupFriendType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/UpdateGroupFriendType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupFriendType(ctx, req.(*UpdateGroupFriendTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupMuteType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupMuteTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupMuteType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/UpdateGroupMuteType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupMuteType(ctx, req.(*UpdateGroupMuteTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupMemberName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupMemberNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupMemberName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/UpdateGroupMemberName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupMemberName(ctx, req.(*UpdateGroupMemberNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/SetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetAdmin(ctx, req.(*SetAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupMemberMuteTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupMemberMuteTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupMemberMuteTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/UpdateGroupMemberMuteTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupMemberMuteTime(ctx, req.(*UpdateGroupMemberMuteTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetPriGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetPriGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetPriGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetPriGroupInfo(ctx, req.(*GetPriGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetPubGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetPubGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetPubGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetPubGroupInfo(ctx, req.(*GetPubGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupList(ctx, req.(*GetGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetGroupMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetGroupMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMemberInfo(ctx, req.(*GetGroupMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetMuteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMuteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetMuteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetMuteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetMuteList(ctx, req.(*GetMuteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetNFTGroupExtInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNFTGroupExtInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetNFTGroupExtInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/GetNFTGroupExtInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetNFTGroupExtInfo(ctx, req.(*GetNFTGroupExtInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceUpdateGroupType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceUpdateGroupTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceUpdateGroupType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceUpdateGroupType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceUpdateGroupType(ctx, req.(*ForceUpdateGroupTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceDisbandGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceDisbandGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceDisbandGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceDisbandGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceDisbandGroup(ctx, req.(*ForceDisbandGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceAddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceAddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceAddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceAddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceAddMember(ctx, req.(*ForceAddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceAddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceAddMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceAddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceAddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceAddMembers(ctx, req.(*ForceAddMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceDeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceDeleteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceDeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceDeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceDeleteMember(ctx, req.(*ForceDeleteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceDeleteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceDeleteMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceDeleteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceDeleteMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceDeleteMembers(ctx, req.(*ForceDeleteMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceJoinGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceJoinGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceJoinGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceJoinGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceJoinGroups(ctx, req.(*ForceJoinGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceExitGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceExitGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceExitGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceExitGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceExitGroups(ctx, req.(*ForceExitGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ForceChangeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceChangeOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ForceChangeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.group.Group/ForceChangeOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ForceChangeOwner(ctx, req.(*ForceChangeOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtalk.group.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupIds",
			Handler:    _Group_GetGroupIds_Handler,
		},
		{
			MethodName: "CheckInGroup",
			Handler:    _Group_CheckInGroup_Handler,
		},
		{
			MethodName: "GetMemberIds",
			Handler:    _Group_GetMemberIds_Handler,
		},
		{
			MethodName: "CheckMute",
			Handler:    _Group_CheckMute_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Group_GetGroups_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _Group_GetMember_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _Group_GetGroupInfo_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "CreateNFTGroup",
			Handler:    _Group_CreateNFTGroup_Handler,
		},
		{
			MethodName: "InviteGroupMembers",
			Handler:    _Group_InviteGroupMembers_Handler,
		},
		{
			MethodName: "GroupExit",
			Handler:    _Group_GroupExit_Handler,
		},
		{
			MethodName: "GroupDisband",
			Handler:    _Group_GroupDisband_Handler,
		},
		{
			MethodName: "GroupRemove",
			Handler:    _Group_GroupRemove_Handler,
		},
		{
			MethodName: "ChangeOwner",
			Handler:    _Group_ChangeOwner_Handler,
		},
		{
			MethodName: "UpdateGroupName",
			Handler:    _Group_UpdateGroupName_Handler,
		},
		{
			MethodName: "UpdateGroupAvatar",
			Handler:    _Group_UpdateGroupAvatar_Handler,
		},
		{
			MethodName: "UpdateGroupJoinType",
			Handler:    _Group_UpdateGroupJoinType_Handler,
		},
		{
			MethodName: "UpdateGroupFriendType",
			Handler:    _Group_UpdateGroupFriendType_Handler,
		},
		{
			MethodName: "UpdateGroupMuteType",
			Handler:    _Group_UpdateGroupMuteType_Handler,
		},
		{
			MethodName: "UpdateGroupMemberName",
			Handler:    _Group_UpdateGroupMemberName_Handler,
		},
		{
			MethodName: "SetAdmin",
			Handler:    _Group_SetAdmin_Handler,
		},
		{
			MethodName: "UpdateGroupMemberMuteTime",
			Handler:    _Group_UpdateGroupMemberMuteTime_Handler,
		},
		{
			MethodName: "GetPriGroupInfo",
			Handler:    _Group_GetPriGroupInfo_Handler,
		},
		{
			MethodName: "GetPubGroupInfo",
			Handler:    _Group_GetPubGroupInfo_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _Group_GetGroupList_Handler,
		},
		{
			MethodName: "GetGroupMemberList",
			Handler:    _Group_GetGroupMemberList_Handler,
		},
		{
			MethodName: "GetGroupMemberInfo",
			Handler:    _Group_GetGroupMemberInfo_Handler,
		},
		{
			MethodName: "GetMuteList",
			Handler:    _Group_GetMuteList_Handler,
		},
		{
			MethodName: "GetNFTGroupExtInfo",
			Handler:    _Group_GetNFTGroupExtInfo_Handler,
		},
		{
			MethodName: "ForceUpdateGroupType",
			Handler:    _Group_ForceUpdateGroupType_Handler,
		},
		{
			MethodName: "ForceDisbandGroup",
			Handler:    _Group_ForceDisbandGroup_Handler,
		},
		{
			MethodName: "ForceAddMember",
			Handler:    _Group_ForceAddMember_Handler,
		},
		{
			MethodName: "ForceAddMembers",
			Handler:    _Group_ForceAddMembers_Handler,
		},
		{
			MethodName: "ForceDeleteMember",
			Handler:    _Group_ForceDeleteMember_Handler,
		},
		{
			MethodName: "ForceDeleteMembers",
			Handler:    _Group_ForceDeleteMembers_Handler,
		},
		{
			MethodName: "ForceJoinGroups",
			Handler:    _Group_ForceJoinGroups_Handler,
		},
		{
			MethodName: "ForceExitGroups",
			Handler:    _Group_ForceExitGroups_Handler,
		},
		{
			MethodName: "ForceChangeOwner",
			Handler:    _Group_ForceChangeOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
