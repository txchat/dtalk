// protoc -I=. -I=$GOPATH/src --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: group.proto

package group

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 群状态
type GroupStatus int32

const (
	GroupStatus_GROUP_STATUS_NORMAL  GroupStatus = 0 // 正常
	GroupStatus_GROUP_STATUS_BLOCK   GroupStatus = 1 // 封禁
	GroupStatus_GROUP_STATUS_DISBAND GroupStatus = 2 // 解散
)

// Enum value maps for GroupStatus.
var (
	GroupStatus_name = map[int32]string{
		0: "GROUP_STATUS_NORMAL",
		1: "GROUP_STATUS_BLOCK",
		2: "GROUP_STATUS_DISBAND",
	}
	GroupStatus_value = map[string]int32{
		"GROUP_STATUS_NORMAL":  0,
		"GROUP_STATUS_BLOCK":   1,
		"GROUP_STATUS_DISBAND": 2,
	}
)

func (x GroupStatus) Enum() *GroupStatus {
	p := new(GroupStatus)
	*p = x
	return p
}

func (x GroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[0].Descriptor()
}

func (GroupStatus) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[0]
}

func (x GroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupStatus.Descriptor instead.
func (GroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{0}
}

// 群类型
type GroupType int32

const (
	GroupType_GROUP_TYPE_NORMAL GroupType = 0 // 普通群
	GroupType_GROUP_TYPE_ENT    GroupType = 1 // 全员群
	GroupType_GROUP_TYPE_DEP    GroupType = 2 // 部门群
	GroupType_GROUP_TYPE_NFT    GroupType = 3 // 藏品群
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "GROUP_TYPE_NORMAL",
		1: "GROUP_TYPE_ENT",
		2: "GROUP_TYPE_DEP",
		3: "GROUP_TYPE_NFT",
	}
	GroupType_value = map[string]int32{
		"GROUP_TYPE_NORMAL": 0,
		"GROUP_TYPE_ENT":    1,
		"GROUP_TYPE_DEP":    2,
		"GROUP_TYPE_NFT":    3,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[1].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[1]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{1}
}

// 群内加群设置
type GroupJoinType int32

const (
	GroupJoinType_GROUP_JOIN_TYPE_ANY   GroupJoinType = 0 // 无需审批（默认）
	GroupJoinType_GROUP_JOIN_TYPE_ADMIN GroupJoinType = 1 // 禁止加群，群主和管理员邀请加群
	GroupJoinType_GROUP_JOIN_TYPE_APPLY GroupJoinType = 2 // 普通人邀请需要审批,群主和管理员直接加群
)

// Enum value maps for GroupJoinType.
var (
	GroupJoinType_name = map[int32]string{
		0: "GROUP_JOIN_TYPE_ANY",
		1: "GROUP_JOIN_TYPE_ADMIN",
		2: "GROUP_JOIN_TYPE_APPLY",
	}
	GroupJoinType_value = map[string]int32{
		"GROUP_JOIN_TYPE_ANY":   0,
		"GROUP_JOIN_TYPE_ADMIN": 1,
		"GROUP_JOIN_TYPE_APPLY": 2,
	}
)

func (x GroupJoinType) Enum() *GroupJoinType {
	p := new(GroupJoinType)
	*p = x
	return p
}

func (x GroupJoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupJoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[2].Descriptor()
}

func (GroupJoinType) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[2]
}

func (x GroupJoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupJoinType.Descriptor instead.
func (GroupJoinType) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{2}
}

// 群内发言设置
type GroupMuteType int32

const (
	GroupMuteType_GROUP_MUTE_TYPE_ANY   GroupMuteType = 0 // 全员可发言
	GroupMuteType_GROUP_MUTE_TYPE_ADMIN GroupMuteType = 1 // 全员禁言(除群主和管理员)
)

// Enum value maps for GroupMuteType.
var (
	GroupMuteType_name = map[int32]string{
		0: "GROUP_MUTE_TYPE_ANY",
		1: "GROUP_MUTE_TYPE_ADMIN",
	}
	GroupMuteType_value = map[string]int32{
		"GROUP_MUTE_TYPE_ANY":   0,
		"GROUP_MUTE_TYPE_ADMIN": 1,
	}
)

func (x GroupMuteType) Enum() *GroupMuteType {
	p := new(GroupMuteType)
	*p = x
	return p
}

func (x GroupMuteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMuteType) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[3].Descriptor()
}

func (GroupMuteType) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[3]
}

func (x GroupMuteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMuteType.Descriptor instead.
func (GroupMuteType) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{3}
}

// 群内加好友设置
type GroupFriendType int32

const (
	GroupFriendType_GROUP_FRIEND_TYPE_ALLOW GroupFriendType = 0 // 群内可加好友
	GroupFriendType_GROUP_FRIEND_TYPE_DENY  GroupFriendType = 1 // 群内禁止加好友
)

// Enum value maps for GroupFriendType.
var (
	GroupFriendType_name = map[int32]string{
		0: "GROUP_FRIEND_TYPE_ALLOW",
		1: "GROUP_FRIEND_TYPE_DENY",
	}
	GroupFriendType_value = map[string]int32{
		"GROUP_FRIEND_TYPE_ALLOW": 0,
		"GROUP_FRIEND_TYPE_DENY":  1,
	}
)

func (x GroupFriendType) Enum() *GroupFriendType {
	p := new(GroupFriendType)
	*p = x
	return p
}

func (x GroupFriendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupFriendType) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[4].Descriptor()
}

func (GroupFriendType) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[4]
}

func (x GroupFriendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupFriendType.Descriptor instead.
func (GroupFriendType) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{4}
}

// 群成员类型
type GroupMemberType int32

const (
	GroupMemberType_GROUP_MEMBER_TYPE_NORMAL GroupMemberType = 0  // 群员
	GroupMemberType_GROUP_MEMBER_TYPE_ADMIN  GroupMemberType = 1  // 管理员
	GroupMemberType_GROUP_MEMBER_TYPE_OWNER  GroupMemberType = 2  // 群主
	GroupMemberType_GROUP_MEMBER_TYPE_OTHER  GroupMemberType = 10 // 退群
)

// Enum value maps for GroupMemberType.
var (
	GroupMemberType_name = map[int32]string{
		0:  "GROUP_MEMBER_TYPE_NORMAL",
		1:  "GROUP_MEMBER_TYPE_ADMIN",
		2:  "GROUP_MEMBER_TYPE_OWNER",
		10: "GROUP_MEMBER_TYPE_OTHER",
	}
	GroupMemberType_value = map[string]int32{
		"GROUP_MEMBER_TYPE_NORMAL": 0,
		"GROUP_MEMBER_TYPE_ADMIN":  1,
		"GROUP_MEMBER_TYPE_OWNER":  2,
		"GROUP_MEMBER_TYPE_OTHER":  10,
	}
)

func (x GroupMemberType) Enum() *GroupMemberType {
	p := new(GroupMemberType)
	*p = x
	return p
}

func (x GroupMemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[5].Descriptor()
}

func (GroupMemberType) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[5]
}

func (x GroupMemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMemberType.Descriptor instead.
func (GroupMemberType) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{5}
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{0}
}

func (x *GroupInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type GroupMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 成员 id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 成员在群里的名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GroupMemberInfo) Reset() {
	*x = GroupMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberInfo) ProtoMessage() {}

func (x *GroupMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberInfo.ProtoReflect.Descriptor instead.
func (*GroupMemberInfo) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{1}
}

func (x *GroupMemberInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupMemberInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetGroupIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *GetGroupIdsRequest) Reset() {
	*x = GetGroupIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupIdsRequest) ProtoMessage() {}

func (x *GetGroupIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupIdsRequest.ProtoReflect.Descriptor instead.
func (*GetGroupIdsRequest) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{2}
}

func (x *GetGroupIdsRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type GetGroupIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIds []int64 `protobuf:"varint,1,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *GetGroupIdsReply) Reset() {
	*x = GetGroupIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupIdsReply) ProtoMessage() {}

func (x *GetGroupIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupIdsReply.ProtoReflect.Descriptor instead.
func (*GetGroupIdsReply) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupIdsReply) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type CheckInGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupId  int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CheckInGroupRequest) Reset() {
	*x = CheckInGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInGroupRequest) ProtoMessage() {}

func (x *CheckInGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInGroupRequest.ProtoReflect.Descriptor instead.
func (*CheckInGroupRequest) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{4}
}

func (x *CheckInGroupRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *CheckInGroupRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type CheckInGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk bool `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
}

func (x *CheckInGroupReply) Reset() {
	*x = CheckInGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInGroupReply) ProtoMessage() {}

func (x *CheckInGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInGroupReply.ProtoReflect.Descriptor instead.
func (*CheckInGroupReply) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{5}
}

func (x *CheckInGroupReply) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

type GetMemberIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetMemberIdsRequest) Reset() {
	*x = GetMemberIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberIdsRequest) ProtoMessage() {}

func (x *GetMemberIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberIdsRequest.ProtoReflect.Descriptor instead.
func (*GetMemberIdsRequest) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{6}
}

func (x *GetMemberIdsRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type GetMemberIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberIds []string `protobuf:"bytes,1,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (x *GetMemberIdsReply) Reset() {
	*x = GetMemberIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberIdsReply) ProtoMessage() {}

func (x *GetMemberIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberIdsReply.ProtoReflect.Descriptor instead.
func (*GetMemberIdsReply) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{7}
}

func (x *GetMemberIdsReply) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

type CheckMuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupId  int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CheckMuteRequest) Reset() {
	*x = CheckMuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMuteRequest) ProtoMessage() {}

func (x *CheckMuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMuteRequest.ProtoReflect.Descriptor instead.
func (*CheckMuteRequest) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{8}
}

func (x *CheckMuteRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *CheckMuteRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type CheckMuteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk bool `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
}

func (x *CheckMuteReply) Reset() {
	*x = CheckMuteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMuteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMuteReply) ProtoMessage() {}

func (x *CheckMuteReply) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMuteReply.ProtoReflect.Descriptor instead.
func (*CheckMuteReply) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{9}
}

func (x *CheckMuteReply) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

// 得到加入的所有群
type GetGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGroupsReq) Reset() {
	*x = GetGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsReq) ProtoMessage() {}

func (x *GetGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsReq.ProtoReflect.Descriptor instead.
func (*GetGroupsReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{10}
}

func (x *GetGroupsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GroupInfo `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetGroupsResp) Reset() {
	*x = GetGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsResp) ProtoMessage() {}

func (x *GetGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsResp.ProtoReflect.Descriptor instead.
func (*GetGroupsResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{11}
}

func (x *GetGroupsResp) GetGroups() []*GroupInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GroupBizInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MarkId        string `protobuf:"bytes,2,opt,name=mark_id,json=markId,proto3" json:"mark_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Avatar        string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	MemberNum     int32  `protobuf:"varint,5,opt,name=member_num,json=memberNum,proto3" json:"member_num,omitempty"`
	MemberMaximum int32  `protobuf:"varint,6,opt,name=member_maximum,json=memberMaximum,proto3" json:"member_maximum,omitempty"`
	Introduce     string `protobuf:"bytes,7,opt,name=introduce,proto3" json:"introduce,omitempty"`
	// 群状态，0=正常 1=封禁 2=解散
	Status     GroupStatus `protobuf:"varint,8,opt,name=status,proto3,enum=dtalk.group.GroupStatus" json:"status,omitempty"`
	OwnerId    string      `protobuf:"bytes,9,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreateTime int64       `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime int64       `protobuf:"varint,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// 加群方式，0=无需审批（默认），1=禁止加群，群主和管理员邀请加群,
	// 2=普通人邀请需要审批,群主和管理员直接加群
	JoinType GroupJoinType `protobuf:"varint,12,opt,name=join_type,json=joinType,proto3,enum=dtalk.group.GroupJoinType" json:"join_type,omitempty"`
	// 禁言， 0=全员可发言， 1=全员禁言(除群主和管理员)
	MuteType GroupMuteType `protobuf:"varint,13,opt,name=mute_type,json=muteType,proto3,enum=dtalk.group.GroupMuteType" json:"mute_type,omitempty"`
	// 加好友限制， 0=群内可加好友，1=群内禁止加好友
	FriendType GroupFriendType `protobuf:"varint,14,opt,name=friend_type,json=friendType,proto3,enum=dtalk.group.GroupFriendType" json:"friend_type,omitempty"`
	// 群内当前被禁言的人数
	MuteNum int32 `protobuf:"varint,15,opt,name=mute_num,json=muteNum,proto3" json:"mute_num,omitempty"`
	// 群内管理员数量
	AdminNum int32  `protobuf:"varint,16,opt,name=admin_num,json=adminNum,proto3" json:"admin_num,omitempty"`
	AESKey   string `protobuf:"bytes,17,opt,name=AES_key,json=AESKey,proto3" json:"AES_key,omitempty"`
	PubName  string `protobuf:"bytes,18,opt,name=pub_name,json=pubName,proto3" json:"pub_name,omitempty"`
	// 群类型 (0: 普通群, 1: 全员群, 2: 部门群)
	Type    GroupType             `protobuf:"varint,19,opt,name=type,proto3,enum=dtalk.group.GroupType" json:"type,omitempty"`
	Owner   *GroupMemberBizInfo   `protobuf:"bytes,20,opt,name=owner,proto3" json:"owner,omitempty"`
	Person  *GroupMemberBizInfo   `protobuf:"bytes,21,opt,name=person,proto3" json:"person,omitempty"`
	Members []*GroupMemberBizInfo `protobuf:"bytes,22,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GroupBizInfo) Reset() {
	*x = GroupBizInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBizInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBizInfo) ProtoMessage() {}

func (x *GroupBizInfo) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBizInfo.ProtoReflect.Descriptor instead.
func (*GroupBizInfo) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{12}
}

func (x *GroupBizInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupBizInfo) GetMarkId() string {
	if x != nil {
		return x.MarkId
	}
	return ""
}

func (x *GroupBizInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupBizInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GroupBizInfo) GetMemberNum() int32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *GroupBizInfo) GetMemberMaximum() int32 {
	if x != nil {
		return x.MemberMaximum
	}
	return 0
}

func (x *GroupBizInfo) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *GroupBizInfo) GetStatus() GroupStatus {
	if x != nil {
		return x.Status
	}
	return GroupStatus_GROUP_STATUS_NORMAL
}

func (x *GroupBizInfo) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GroupBizInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GroupBizInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GroupBizInfo) GetJoinType() GroupJoinType {
	if x != nil {
		return x.JoinType
	}
	return GroupJoinType_GROUP_JOIN_TYPE_ANY
}

func (x *GroupBizInfo) GetMuteType() GroupMuteType {
	if x != nil {
		return x.MuteType
	}
	return GroupMuteType_GROUP_MUTE_TYPE_ANY
}

func (x *GroupBizInfo) GetFriendType() GroupFriendType {
	if x != nil {
		return x.FriendType
	}
	return GroupFriendType_GROUP_FRIEND_TYPE_ALLOW
}

func (x *GroupBizInfo) GetMuteNum() int32 {
	if x != nil {
		return x.MuteNum
	}
	return 0
}

func (x *GroupBizInfo) GetAdminNum() int32 {
	if x != nil {
		return x.AdminNum
	}
	return 0
}

func (x *GroupBizInfo) GetAESKey() string {
	if x != nil {
		return x.AESKey
	}
	return ""
}

func (x *GroupBizInfo) GetPubName() string {
	if x != nil {
		return x.PubName
	}
	return ""
}

func (x *GroupBizInfo) GetType() GroupType {
	if x != nil {
		return x.Type
	}
	return GroupType_GROUP_TYPE_NORMAL
}

func (x *GroupBizInfo) GetOwner() *GroupMemberBizInfo {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GroupBizInfo) GetPerson() *GroupMemberBizInfo {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *GroupBizInfo) GetMembers() []*GroupMemberBizInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type GroupMemberBizInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 用户角色，0=群员,1=管理员, 2=群主，10=退群
	Type GroupMemberType `protobuf:"varint,4,opt,name=type,proto3,enum=dtalk.group.GroupMemberType" json:"type,omitempty"`
	// 该用户被禁言结束的时间 9223372036854775807=永久禁言
	MuteTime int64 `protobuf:"varint,5,opt,name=mute_time,json=muteTime,proto3" json:"mute_time,omitempty"`
	JoinTime int64 `protobuf:"varint,6,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
}

func (x *GroupMemberBizInfo) Reset() {
	*x = GroupMemberBizInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberBizInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberBizInfo) ProtoMessage() {}

func (x *GroupMemberBizInfo) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberBizInfo.ProtoReflect.Descriptor instead.
func (*GroupMemberBizInfo) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{13}
}

func (x *GroupMemberBizInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupMemberBizInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupMemberBizInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupMemberBizInfo) GetType() GroupMemberType {
	if x != nil {
		return x.Type
	}
	return GroupMemberType_GROUP_MEMBER_TYPE_NORMAL
}

func (x *GroupMemberBizInfo) GetMuteTime() int64 {
	if x != nil {
		return x.MuteTime
	}
	return 0
}

func (x *GroupMemberBizInfo) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

// 创建群聊
type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GroupType GroupType          `protobuf:"varint,2,opt,name=group_type,json=groupType,proto3,enum=dtalk.group.GroupType" json:"group_type,omitempty"`
	Owner     *GroupMemberInfo   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Members   []*GroupMemberInfo `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{14}
}

func (x *CreateGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupReq) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_NORMAL
}

func (x *CreateGroupReq) GetOwner() *GroupMemberInfo {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateGroupReq) GetMembers() []*GroupMemberInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type CreateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateGroupResp) Reset() {
	*x = CreateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResp) ProtoMessage() {}

func (x *CreateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResp.ProtoReflect.Descriptor instead.
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{15}
}

func (x *CreateGroupResp) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Nft  []*Condition_NFT `protobuf:"bytes,2,rep,name=nft,proto3" json:"nft,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{16}
}

func (x *Condition) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Condition) GetNft() []*Condition_NFT {
	if x != nil {
		return x.Nft
	}
	return nil
}

// 创建群聊
type CreateNFTGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GroupType GroupType          `protobuf:"varint,2,opt,name=group_type,json=groupType,proto3,enum=dtalk.group.GroupType" json:"group_type,omitempty"`
	Owner     *GroupMemberInfo   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Members   []*GroupMemberInfo `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	Condition *Condition         `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *CreateNFTGroupReq) Reset() {
	*x = CreateNFTGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNFTGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNFTGroupReq) ProtoMessage() {}

func (x *CreateNFTGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNFTGroupReq.ProtoReflect.Descriptor instead.
func (*CreateNFTGroupReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{17}
}

func (x *CreateNFTGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNFTGroupReq) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_NORMAL
}

func (x *CreateNFTGroupReq) GetOwner() *GroupMemberInfo {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateNFTGroupReq) GetMembers() []*GroupMemberInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CreateNFTGroupReq) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type CreateNFTGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateNFTGroupResp) Reset() {
	*x = CreateNFTGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNFTGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNFTGroupResp) ProtoMessage() {}

func (x *CreateNFTGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNFTGroupResp.ProtoReflect.Descriptor instead.
func (*CreateNFTGroupResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{18}
}

func (x *CreateNFTGroupResp) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type InviteGroupMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	InviterId string   `protobuf:"bytes,2,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	MemberIds []string `protobuf:"bytes,3,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (x *InviteGroupMembersReq) Reset() {
	*x = InviteGroupMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupMembersReq) ProtoMessage() {}

func (x *InviteGroupMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupMembersReq.ProtoReflect.Descriptor instead.
func (*InviteGroupMembersReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{19}
}

func (x *InviteGroupMembersReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InviteGroupMembersReq) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *InviteGroupMembersReq) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

type InviteGroupMembersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InviteGroupMembersResp) Reset() {
	*x = InviteGroupMembersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupMembersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupMembersResp) ProtoMessage() {}

func (x *InviteGroupMembersResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupMembersResp.ProtoReflect.Descriptor instead.
func (*InviteGroupMembersResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{20}
}

type GroupExitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
}

func (x *GroupExitReq) Reset() {
	*x = GroupExitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupExitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupExitReq) ProtoMessage() {}

func (x *GroupExitReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupExitReq.ProtoReflect.Descriptor instead.
func (*GroupExitReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{21}
}

func (x *GroupExitReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupExitReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

type GroupExitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupExitResp) Reset() {
	*x = GroupExitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupExitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupExitResp) ProtoMessage() {}

func (x *GroupExitResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupExitResp.ProtoReflect.Descriptor instead.
func (*GroupExitResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{22}
}

type GroupDisbandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
}

func (x *GroupDisbandReq) Reset() {
	*x = GroupDisbandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDisbandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDisbandReq) ProtoMessage() {}

func (x *GroupDisbandReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDisbandReq.ProtoReflect.Descriptor instead.
func (*GroupDisbandReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{23}
}

func (x *GroupDisbandReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupDisbandReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

type GroupDisbandResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupDisbandResp) Reset() {
	*x = GroupDisbandResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDisbandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDisbandResp) ProtoMessage() {}

func (x *GroupDisbandResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDisbandResp.ProtoReflect.Descriptor instead.
func (*GroupDisbandResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{24}
}

type GroupRemoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId  string   `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	MemberIds []string `protobuf:"bytes,3,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (x *GroupRemoveReq) Reset() {
	*x = GroupRemoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRemoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRemoveReq) ProtoMessage() {}

func (x *GroupRemoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRemoveReq.ProtoReflect.Descriptor instead.
func (*GroupRemoveReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{25}
}

func (x *GroupRemoveReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupRemoveReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *GroupRemoveReq) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

type GroupRemoveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群当前人数
	MemberNum int32 `protobuf:"varint,1,opt,name=member_num,json=memberNum,proto3" json:"member_num,omitempty"`
	// 成功被踢的成员列表
	MemberIds []string `protobuf:"bytes,2,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (x *GroupRemoveResp) Reset() {
	*x = GroupRemoveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRemoveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRemoveResp) ProtoMessage() {}

func (x *GroupRemoveResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRemoveResp.ProtoReflect.Descriptor instead.
func (*GroupRemoveResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{26}
}

func (x *GroupRemoveResp) GetMemberNum() int32 {
	if x != nil {
		return x.MemberNum
	}
	return 0
}

func (x *GroupRemoveResp) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

type ChangeOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	// 被转让为群主的群成员 id
	MemberId string `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *ChangeOwnerReq) Reset() {
	*x = ChangeOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeOwnerReq) ProtoMessage() {}

func (x *ChangeOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeOwnerReq.ProtoReflect.Descriptor instead.
func (*ChangeOwnerReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{27}
}

func (x *ChangeOwnerReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ChangeOwnerReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *ChangeOwnerReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type ChangeOwnerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeOwnerResp) Reset() {
	*x = ChangeOwnerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeOwnerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeOwnerResp) ProtoMessage() {}

func (x *ChangeOwnerResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeOwnerResp.ProtoReflect.Descriptor instead.
func (*ChangeOwnerResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{28}
}

type UpdateGroupNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId   string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PublicName string `protobuf:"bytes,4,opt,name=public_name,json=publicName,proto3" json:"public_name,omitempty"`
}

func (x *UpdateGroupNameReq) Reset() {
	*x = UpdateGroupNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupNameReq) ProtoMessage() {}

func (x *UpdateGroupNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupNameReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupNameReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateGroupNameReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupNameReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UpdateGroupNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGroupNameReq) GetPublicName() string {
	if x != nil {
		return x.PublicName
	}
	return ""
}

type UpdateGroupNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGroupNameResp) Reset() {
	*x = UpdateGroupNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupNameResp) ProtoMessage() {}

func (x *UpdateGroupNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupNameResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupNameResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{30}
}

type UpdateGroupAvatarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	// 群头像 url
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UpdateGroupAvatarReq) Reset() {
	*x = UpdateGroupAvatarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupAvatarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupAvatarReq) ProtoMessage() {}

func (x *UpdateGroupAvatarReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupAvatarReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupAvatarReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateGroupAvatarReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupAvatarReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UpdateGroupAvatarReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type UpdateGroupAvatarResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGroupAvatarResp) Reset() {
	*x = UpdateGroupAvatarResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupAvatarResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupAvatarResp) ProtoMessage() {}

func (x *UpdateGroupAvatarResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupAvatarResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupAvatarResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{32}
}

type UpdateGroupJoinTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       int64         `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId      string        `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	GroupJoinType GroupJoinType `protobuf:"varint,3,opt,name=group_join_type,json=groupJoinType,proto3,enum=dtalk.group.GroupJoinType" json:"group_join_type,omitempty"`
}

func (x *UpdateGroupJoinTypeReq) Reset() {
	*x = UpdateGroupJoinTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupJoinTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupJoinTypeReq) ProtoMessage() {}

func (x *UpdateGroupJoinTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupJoinTypeReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupJoinTypeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateGroupJoinTypeReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupJoinTypeReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UpdateGroupJoinTypeReq) GetGroupJoinType() GroupJoinType {
	if x != nil {
		return x.GroupJoinType
	}
	return GroupJoinType_GROUP_JOIN_TYPE_ANY
}

type UpdateGroupJoinTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGroupJoinTypeResp) Reset() {
	*x = UpdateGroupJoinTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupJoinTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupJoinTypeResp) ProtoMessage() {}

func (x *UpdateGroupJoinTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupJoinTypeResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupJoinTypeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{34}
}

type UpdateGroupFriendTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId         int64           `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId        string          `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	GroupFriendType GroupFriendType `protobuf:"varint,3,opt,name=group_friend_type,json=groupFriendType,proto3,enum=dtalk.group.GroupFriendType" json:"group_friend_type,omitempty"`
}

func (x *UpdateGroupFriendTypeReq) Reset() {
	*x = UpdateGroupFriendTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupFriendTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupFriendTypeReq) ProtoMessage() {}

func (x *UpdateGroupFriendTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupFriendTypeReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupFriendTypeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateGroupFriendTypeReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupFriendTypeReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UpdateGroupFriendTypeReq) GetGroupFriendType() GroupFriendType {
	if x != nil {
		return x.GroupFriendType
	}
	return GroupFriendType_GROUP_FRIEND_TYPE_ALLOW
}

type UpdateGroupFriendTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGroupFriendTypeResp) Reset() {
	*x = UpdateGroupFriendTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupFriendTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupFriendTypeResp) ProtoMessage() {}

func (x *UpdateGroupFriendTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupFriendTypeResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupFriendTypeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{36}
}

type UpdateGroupMuteTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       int64         `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId      string        `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	GroupMuteType GroupMuteType `protobuf:"varint,3,opt,name=group_mute_type,json=groupMuteType,proto3,enum=dtalk.group.GroupMuteType" json:"group_mute_type,omitempty"`
}

func (x *UpdateGroupMuteTypeReq) Reset() {
	*x = UpdateGroupMuteTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMuteTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMuteTypeReq) ProtoMessage() {}

func (x *UpdateGroupMuteTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMuteTypeReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupMuteTypeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateGroupMuteTypeReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupMuteTypeReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UpdateGroupMuteTypeReq) GetGroupMuteType() GroupMuteType {
	if x != nil {
		return x.GroupMuteType
	}
	return GroupMuteType_GROUP_MUTE_TYPE_ANY
}

type UpdateGroupMuteTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGroupMuteTypeResp) Reset() {
	*x = UpdateGroupMuteTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMuteTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMuteTypeResp) ProtoMessage() {}

func (x *UpdateGroupMuteTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMuteTypeResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupMuteTypeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{38}
}

type UpdateGroupMemberNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId   string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	MemberName string `protobuf:"bytes,3,opt,name=member_name,json=memberName,proto3" json:"member_name,omitempty"`
}

func (x *UpdateGroupMemberNameReq) Reset() {
	*x = UpdateGroupMemberNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMemberNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMemberNameReq) ProtoMessage() {}

func (x *UpdateGroupMemberNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMemberNameReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupMemberNameReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateGroupMemberNameReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupMemberNameReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UpdateGroupMemberNameReq) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

type UpdateGroupMemberNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGroupMemberNameResp) Reset() {
	*x = UpdateGroupMemberNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMemberNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMemberNameResp) ProtoMessage() {}

func (x *UpdateGroupMemberNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMemberNameResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupMemberNameResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{40}
}

type SetAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId         int64           `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId        string          `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	MemberId        string          `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupMemberType GroupMemberType `protobuf:"varint,4,opt,name=group_member_type,json=groupMemberType,proto3,enum=dtalk.group.GroupMemberType" json:"group_member_type,omitempty"`
}

func (x *SetAdminReq) Reset() {
	*x = SetAdminReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAdminReq) ProtoMessage() {}

func (x *SetAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAdminReq.ProtoReflect.Descriptor instead.
func (*SetAdminReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{41}
}

func (x *SetAdminReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetAdminReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *SetAdminReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *SetAdminReq) GetGroupMemberType() GroupMemberType {
	if x != nil {
		return x.GroupMemberType
	}
	return GroupMemberType_GROUP_MEMBER_TYPE_NORMAL
}

type SetAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAdminResp) Reset() {
	*x = SetAdminResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAdminResp) ProtoMessage() {}

func (x *SetAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAdminResp.ProtoReflect.Descriptor instead.
func (*SetAdminResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{42}
}

type UpdateGroupMemberMuteTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId  string   `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	MemberIds []string `protobuf:"bytes,3,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
	MuteTime  int64    `protobuf:"varint,4,opt,name=mute_time,json=muteTime,proto3" json:"mute_time,omitempty"`
}

func (x *UpdateGroupMemberMuteTimeReq) Reset() {
	*x = UpdateGroupMemberMuteTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMemberMuteTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMemberMuteTimeReq) ProtoMessage() {}

func (x *UpdateGroupMemberMuteTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMemberMuteTimeReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupMemberMuteTimeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateGroupMemberMuteTimeReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupMemberMuteTimeReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *UpdateGroupMemberMuteTimeReq) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *UpdateGroupMemberMuteTimeReq) GetMuteTime() int64 {
	if x != nil {
		return x.MuteTime
	}
	return 0
}

type UpdateGroupMemberMuteTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*GroupMemberBizInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *UpdateGroupMemberMuteTimeResp) Reset() {
	*x = UpdateGroupMemberMuteTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMemberMuteTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMemberMuteTimeResp) ProtoMessage() {}

func (x *UpdateGroupMemberMuteTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMemberMuteTimeResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupMemberMuteTimeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateGroupMemberMuteTimeResp) GetMembers() []*GroupMemberBizInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetPriGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId   string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	DisplayNum int32  `protobuf:"varint,3,opt,name=display_num,json=displayNum,proto3" json:"display_num,omitempty"`
}

func (x *GetPriGroupInfoReq) Reset() {
	*x = GetPriGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriGroupInfoReq) ProtoMessage() {}

func (x *GetPriGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetPriGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{45}
}

func (x *GetPriGroupInfoReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetPriGroupInfoReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *GetPriGroupInfoReq) GetDisplayNum() int32 {
	if x != nil {
		return x.DisplayNum
	}
	return 0
}

type GetPriGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *GroupBizInfo `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GetPriGroupInfoResp) Reset() {
	*x = GetPriGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriGroupInfoResp) ProtoMessage() {}

func (x *GetPriGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriGroupInfoResp.ProtoReflect.Descriptor instead.
func (*GetPriGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{46}
}

func (x *GetPriGroupInfoResp) GetGroup() *GroupBizInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

type GetPubGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
}

func (x *GetPubGroupInfoReq) Reset() {
	*x = GetPubGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPubGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPubGroupInfoReq) ProtoMessage() {}

func (x *GetPubGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPubGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetPubGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{47}
}

func (x *GetPubGroupInfoReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetPubGroupInfoReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

type GetPubGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *GroupBizInfo `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GetPubGroupInfoResp) Reset() {
	*x = GetPubGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPubGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPubGroupInfoResp) ProtoMessage() {}

func (x *GetPubGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPubGroupInfoResp.ProtoReflect.Descriptor instead.
func (*GetPubGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{48}
}

func (x *GetPubGroupInfoResp) GetGroup() *GroupBizInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

type GetGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId string `protobuf:"bytes,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
}

func (x *GetGroupListReq) Reset() {
	*x = GetGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupListReq) ProtoMessage() {}

func (x *GetGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupListReq.ProtoReflect.Descriptor instead.
func (*GetGroupListReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{49}
}

func (x *GetGroupListReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

type GetGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GroupBizInfo `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetGroupListResp) Reset() {
	*x = GetGroupListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupListResp) ProtoMessage() {}

func (x *GetGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupListResp.ProtoReflect.Descriptor instead.
func (*GetGroupListResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{50}
}

func (x *GetGroupListResp) GetGroups() []*GroupBizInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetGroupMemberListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
}

func (x *GetGroupMemberListReq) Reset() {
	*x = GetGroupMemberListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberListReq) ProtoMessage() {}

func (x *GetGroupMemberListReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberListReq.ProtoReflect.Descriptor instead.
func (*GetGroupMemberListReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{51}
}

func (x *GetGroupMemberListReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupMemberListReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

type GetGroupMemberListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*GroupMemberBizInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetGroupMemberListResp) Reset() {
	*x = GetGroupMemberListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberListResp) ProtoMessage() {}

func (x *GetGroupMemberListResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberListResp.ProtoReflect.Descriptor instead.
func (*GetGroupMemberListResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{52}
}

func (x *GetGroupMemberListResp) GetMembers() []*GroupMemberBizInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetGroupMemberInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	MemberId string `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *GetGroupMemberInfoReq) Reset() {
	*x = GetGroupMemberInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberInfoReq) ProtoMessage() {}

func (x *GetGroupMemberInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupMemberInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{53}
}

func (x *GetGroupMemberInfoReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupMemberInfoReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *GetGroupMemberInfoReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type GetGroupMemberInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *GroupMemberBizInfo `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *GetGroupMemberInfoResp) Reset() {
	*x = GetGroupMemberInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberInfoResp) ProtoMessage() {}

func (x *GetGroupMemberInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberInfoResp.ProtoReflect.Descriptor instead.
func (*GetGroupMemberInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{54}
}

func (x *GetGroupMemberInfoResp) GetMember() *GroupMemberBizInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

type GetMuteListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PersonId string `protobuf:"bytes,2,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
}

func (x *GetMuteListReq) Reset() {
	*x = GetMuteListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMuteListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMuteListReq) ProtoMessage() {}

func (x *GetMuteListReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMuteListReq.ProtoReflect.Descriptor instead.
func (*GetMuteListReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{55}
}

func (x *GetMuteListReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetMuteListReq) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

type GetMuteListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*GroupMemberBizInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetMuteListResp) Reset() {
	*x = GetMuteListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMuteListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMuteListResp) ProtoMessage() {}

func (x *GetMuteListResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMuteListResp.ProtoReflect.Descriptor instead.
func (*GetMuteListResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{56}
}

func (x *GetMuteListResp) GetMembers() []*GroupMemberBizInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetNFTGroupExtInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetNFTGroupExtInfoReq) Reset() {
	*x = GetNFTGroupExtInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTGroupExtInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTGroupExtInfoReq) ProtoMessage() {}

func (x *GetNFTGroupExtInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTGroupExtInfoReq.ProtoReflect.Descriptor instead.
func (*GetNFTGroupExtInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{57}
}

func (x *GetNFTGroupExtInfoReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type GetNFTGroupExtInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *GetNFTGroupExtInfoResp) Reset() {
	*x = GetNFTGroupExtInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTGroupExtInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTGroupExtInfoResp) ProtoMessage() {}

func (x *GetNFTGroupExtInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTGroupExtInfoResp.ProtoReflect.Descriptor instead.
func (*GetNFTGroupExtInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{58}
}

func (x *GetNFTGroupExtInfoResp) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type GetNFTGroupsExtInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNFTGroupsExtInfoReq) Reset() {
	*x = GetNFTGroupsExtInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTGroupsExtInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTGroupsExtInfoReq) ProtoMessage() {}

func (x *GetNFTGroupsExtInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTGroupsExtInfoReq.ProtoReflect.Descriptor instead.
func (*GetNFTGroupsExtInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{59}
}

type GetNFTGroupsExtInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*GetNFTGroupsExtInfoResp_ConditionUnionGroupId `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *GetNFTGroupsExtInfoResp) Reset() {
	*x = GetNFTGroupsExtInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTGroupsExtInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTGroupsExtInfoResp) ProtoMessage() {}

func (x *GetNFTGroupsExtInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTGroupsExtInfoResp.ProtoReflect.Descriptor instead.
func (*GetNFTGroupsExtInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{60}
}

func (x *GetNFTGroupsExtInfoResp) GetConditions() []*GetNFTGroupsExtInfoResp_ConditionUnionGroupId {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type ForceAddMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupId  int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ForceAddMemberReq) Reset() {
	*x = ForceAddMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceAddMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceAddMemberReq) ProtoMessage() {}

func (x *ForceAddMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceAddMemberReq.ProtoReflect.Descriptor instead.
func (*ForceAddMemberReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{61}
}

func (x *ForceAddMemberReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *ForceAddMemberReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ForceAddMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceAddMemberResp) Reset() {
	*x = ForceAddMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceAddMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceAddMemberResp) ProtoMessage() {}

func (x *ForceAddMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceAddMemberResp.ProtoReflect.Descriptor instead.
func (*ForceAddMemberResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{62}
}

type ForceAddMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64              `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Members []*GroupMemberInfo `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *ForceAddMembersReq) Reset() {
	*x = ForceAddMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceAddMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceAddMembersReq) ProtoMessage() {}

func (x *ForceAddMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceAddMembersReq.ProtoReflect.Descriptor instead.
func (*ForceAddMembersReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{63}
}

func (x *ForceAddMembersReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForceAddMembersReq) GetMembers() []*GroupMemberInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type ForceAddMembersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceAddMembersResp) Reset() {
	*x = ForceAddMembersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceAddMembersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceAddMembersResp) ProtoMessage() {}

func (x *ForceAddMembersResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceAddMembersResp.ProtoReflect.Descriptor instead.
func (*ForceAddMembersResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{64}
}

type ForceDeleteMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupId  int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ForceDeleteMemberReq) Reset() {
	*x = ForceDeleteMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceDeleteMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceDeleteMemberReq) ProtoMessage() {}

func (x *ForceDeleteMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceDeleteMemberReq.ProtoReflect.Descriptor instead.
func (*ForceDeleteMemberReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{65}
}

func (x *ForceDeleteMemberReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *ForceDeleteMemberReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ForceDeleteMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceDeleteMemberResp) Reset() {
	*x = ForceDeleteMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceDeleteMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceDeleteMemberResp) ProtoMessage() {}

func (x *ForceDeleteMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceDeleteMemberResp.ProtoReflect.Descriptor instead.
func (*ForceDeleteMemberResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{66}
}

type ForceDeleteMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MemberIds []string `protobuf:"bytes,2,rep,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (x *ForceDeleteMembersReq) Reset() {
	*x = ForceDeleteMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceDeleteMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceDeleteMembersReq) ProtoMessage() {}

func (x *ForceDeleteMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceDeleteMembersReq.ProtoReflect.Descriptor instead.
func (*ForceDeleteMembersReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{67}
}

func (x *ForceDeleteMembersReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForceDeleteMembersReq) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

type ForceDeleteMembersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceDeleteMembersResp) Reset() {
	*x = ForceDeleteMembersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceDeleteMembersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceDeleteMembersResp) ProtoMessage() {}

func (x *ForceDeleteMembersResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceDeleteMembersResp.ProtoReflect.Descriptor instead.
func (*ForceDeleteMembersResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{68}
}

type GetMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupId  int64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetMemberReq) Reset() {
	*x = GetMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberReq) ProtoMessage() {}

func (x *GetMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberReq.ProtoReflect.Descriptor instead.
func (*GetMemberReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{69}
}

func (x *GetMemberReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *GetMemberReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type GetMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId               int64  `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupMemberId         string `protobuf:"bytes,2,opt,name=groupMemberId,proto3" json:"groupMemberId,omitempty"`
	GroupMemberName       string `protobuf:"bytes,3,opt,name=groupMemberName,proto3" json:"groupMemberName,omitempty"`
	GroupMemberType       int32  `protobuf:"varint,4,opt,name=groupMemberType,proto3" json:"groupMemberType,omitempty"`
	GroupMemberJoinTime   int64  `protobuf:"varint,5,opt,name=groupMemberJoinTime,proto3" json:"groupMemberJoinTime,omitempty"`
	GroupMemberUpdateTime int64  `protobuf:"varint,6,opt,name=groupMemberUpdateTime,proto3" json:"groupMemberUpdateTime,omitempty"`
}

func (x *GetMemberResp) Reset() {
	*x = GetMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberResp) ProtoMessage() {}

func (x *GetMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberResp.ProtoReflect.Descriptor instead.
func (*GetMemberResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{70}
}

func (x *GetMemberResp) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetMemberResp) GetGroupMemberId() string {
	if x != nil {
		return x.GroupMemberId
	}
	return ""
}

func (x *GetMemberResp) GetGroupMemberName() string {
	if x != nil {
		return x.GroupMemberName
	}
	return ""
}

func (x *GetMemberResp) GetGroupMemberType() int32 {
	if x != nil {
		return x.GroupMemberType
	}
	return 0
}

func (x *GetMemberResp) GetGroupMemberJoinTime() int64 {
	if x != nil {
		return x.GroupMemberJoinTime
	}
	return 0
}

func (x *GetMemberResp) GetGroupMemberUpdateTime() int64 {
	if x != nil {
		return x.GroupMemberUpdateTime
	}
	return 0
}

type GetGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *GetGroupInfoReq) Reset() {
	*x = GetGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoReq) ProtoMessage() {}

func (x *GetGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{71}
}

func (x *GetGroupInfoReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type GetGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      int64  `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupExist   bool   `protobuf:"varint,2,opt,name=group_exist,json=groupExist,proto3" json:"group_exist,omitempty"`
	GroupName    string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupAvatar  string `protobuf:"bytes,4,opt,name=group_avatar,json=groupAvatar,proto3" json:"group_avatar,omitempty"`
	GroupOwnerId string `protobuf:"bytes,5,opt,name=group_owner_id,json=groupOwnerId,proto3" json:"group_owner_id,omitempty"`
}

func (x *GetGroupInfoResp) Reset() {
	*x = GetGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoResp) ProtoMessage() {}

func (x *GetGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoResp.ProtoReflect.Descriptor instead.
func (*GetGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{72}
}

func (x *GetGroupInfoResp) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupInfoResp) GetGroupExist() bool {
	if x != nil {
		return x.GroupExist
	}
	return false
}

func (x *GetGroupInfoResp) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GetGroupInfoResp) GetGroupAvatar() string {
	if x != nil {
		return x.GroupAvatar
	}
	return ""
}

func (x *GetGroupInfoResp) GetGroupOwnerId() string {
	if x != nil {
		return x.GroupOwnerId
	}
	return ""
}

type ForceDisbandGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OpeId   string `protobuf:"bytes,2,opt,name=ope_id,json=opeId,proto3" json:"ope_id,omitempty"`
}

func (x *ForceDisbandGroupReq) Reset() {
	*x = ForceDisbandGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceDisbandGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceDisbandGroupReq) ProtoMessage() {}

func (x *ForceDisbandGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceDisbandGroupReq.ProtoReflect.Descriptor instead.
func (*ForceDisbandGroupReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{73}
}

func (x *ForceDisbandGroupReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForceDisbandGroupReq) GetOpeId() string {
	if x != nil {
		return x.OpeId
	}
	return ""
}

type ForceDisbandGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceDisbandGroupResp) Reset() {
	*x = ForceDisbandGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceDisbandGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceDisbandGroupResp) ProtoMessage() {}

func (x *ForceDisbandGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceDisbandGroupResp.ProtoReflect.Descriptor instead.
func (*ForceDisbandGroupResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{74}
}

type ForceUpdateGroupTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupType int32 `protobuf:"varint,2,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
}

func (x *ForceUpdateGroupTypeReq) Reset() {
	*x = ForceUpdateGroupTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceUpdateGroupTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceUpdateGroupTypeReq) ProtoMessage() {}

func (x *ForceUpdateGroupTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceUpdateGroupTypeReq.ProtoReflect.Descriptor instead.
func (*ForceUpdateGroupTypeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{75}
}

func (x *ForceUpdateGroupTypeReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForceUpdateGroupTypeReq) GetGroupType() int32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

type ForceUpdateGroupTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupType int32 `protobuf:"varint,2,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
}

func (x *ForceUpdateGroupTypeResp) Reset() {
	*x = ForceUpdateGroupTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceUpdateGroupTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceUpdateGroupTypeResp) ProtoMessage() {}

func (x *ForceUpdateGroupTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceUpdateGroupTypeResp.ProtoReflect.Descriptor instead.
func (*ForceUpdateGroupTypeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{76}
}

func (x *ForceUpdateGroupTypeResp) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForceUpdateGroupTypeResp) GetGroupType() int32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

type ForceJoinGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member   *GroupMemberInfo `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	GroupIds []int64          `protobuf:"varint,2,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *ForceJoinGroupsReq) Reset() {
	*x = ForceJoinGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceJoinGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceJoinGroupsReq) ProtoMessage() {}

func (x *ForceJoinGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceJoinGroupsReq.ProtoReflect.Descriptor instead.
func (*ForceJoinGroupsReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{77}
}

func (x *ForceJoinGroupsReq) GetMember() *GroupMemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ForceJoinGroupsReq) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type ForceJoinGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceJoinGroupsResp) Reset() {
	*x = ForceJoinGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceJoinGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceJoinGroupsResp) ProtoMessage() {}

func (x *ForceJoinGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceJoinGroupsResp.ProtoReflect.Descriptor instead.
func (*ForceJoinGroupsResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{78}
}

type ForceExitGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member   *GroupMemberInfo `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	GroupIds []int64          `protobuf:"varint,2,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *ForceExitGroupsReq) Reset() {
	*x = ForceExitGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceExitGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceExitGroupsReq) ProtoMessage() {}

func (x *ForceExitGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceExitGroupsReq.ProtoReflect.Descriptor instead.
func (*ForceExitGroupsReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{79}
}

func (x *ForceExitGroupsReq) GetMember() *GroupMemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ForceExitGroupsReq) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type ForceExitGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceExitGroupsResp) Reset() {
	*x = ForceExitGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceExitGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceExitGroupsResp) ProtoMessage() {}

func (x *ForceExitGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceExitGroupsResp.ProtoReflect.Descriptor instead.
func (*ForceExitGroupsResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{80}
}

type ForceChangeOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64            `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Member  *GroupMemberInfo `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *ForceChangeOwnerReq) Reset() {
	*x = ForceChangeOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceChangeOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceChangeOwnerReq) ProtoMessage() {}

func (x *ForceChangeOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceChangeOwnerReq.ProtoReflect.Descriptor instead.
func (*ForceChangeOwnerReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{81}
}

func (x *ForceChangeOwnerReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ForceChangeOwnerReq) GetMember() *GroupMemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

type ForceChangeOwnerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceChangeOwnerResp) Reset() {
	*x = ForceChangeOwnerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceChangeOwnerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceChangeOwnerResp) ProtoMessage() {}

func (x *ForceChangeOwnerResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceChangeOwnerResp.ProtoReflect.Descriptor instead.
func (*ForceChangeOwnerResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{82}
}

type Condition_NFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Condition_NFT) Reset() {
	*x = Condition_NFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_NFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_NFT) ProtoMessage() {}

func (x *Condition_NFT) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_NFT.ProtoReflect.Descriptor instead.
func (*Condition_NFT) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Condition_NFT) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Condition_NFT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Condition_NFT) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetNFTGroupsExtInfoResp_ConditionUnionGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64      `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Condition *Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *GetNFTGroupsExtInfoResp_ConditionUnionGroupId) Reset() {
	*x = GetNFTGroupsExtInfoResp_ConditionUnionGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNFTGroupsExtInfoResp_ConditionUnionGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNFTGroupsExtInfoResp_ConditionUnionGroupId) ProtoMessage() {}

func (x *GetNFTGroupsExtInfoResp_ConditionUnionGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNFTGroupsExtInfoResp_ConditionUnionGroupId.ProtoReflect.Descriptor instead.
func (*GetNFTGroupsExtInfoResp_ConditionUnionGroupId) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{60, 0}
}

func (x *GetNFTGroupsExtInfoResp_ConditionUnionGroupId) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetNFTGroupsExtInfoResp_ConditionUnionGroupId) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

var File_group_proto protoreflect.FileDescriptor

var file_group_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x47, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x22, 0x35, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x4d,
	0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x28, 0x0a,
	0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x22, 0x30, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a,
	0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69,
	0x73, 0x5f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b,
	0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0xca, 0x06, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x75, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x75, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x41, 0x45, 0x53, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x45, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xbf,
	0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x2c, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x66,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x46, 0x54, 0x52, 0x03, 0x6e, 0x66, 0x74, 0x1a, 0x3d, 0x0a, 0x03, 0x4e, 0x46, 0x54, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x15, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x0f, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x49, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x67, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x11, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x66,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x94, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x94, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x73, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x92, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x75, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x75, 0x6d,
	0x22, 0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2e,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x6c, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x7a,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e,
	0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e,
	0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x22, 0xdf, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x68, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x67, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x15, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x51, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0xb5, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x62, 0x61,
	0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x53, 0x0a, 0x17, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x54, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x67, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22,
	0x15, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x67, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45,
	0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22,
	0x15, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x66, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x16,
	0x0a, 0x14, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2a, 0x58, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x02,
	0x2a, 0x5e, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x46, 0x54, 0x10, 0x03,
	0x2a, 0x5e, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x02,
	0x2a, 0x43, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10,
	0x01, 0x2a, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x32, 0xa0, 0x1a, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x19, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x51, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1e, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x74, 0x12, 0x19,
	0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69,
	0x73, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x21, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x60, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x18, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46,
	0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x46, 0x54, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x46, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e,
	0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a,
	0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x21, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x22, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54,
	0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x1f, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x64, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x64, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x42, 0x27, 0x5a,
	0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x64, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_group_proto_rawDescOnce sync.Once
	file_group_proto_rawDescData = file_group_proto_rawDesc
)

func file_group_proto_rawDescGZIP() []byte {
	file_group_proto_rawDescOnce.Do(func() {
		file_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_group_proto_rawDescData)
	})
	return file_group_proto_rawDescData
}

var file_group_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_group_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_group_proto_goTypes = []interface{}{
	(GroupStatus)(0),                                      // 0: dtalk.group.GroupStatus
	(GroupType)(0),                                        // 1: dtalk.group.GroupType
	(GroupJoinType)(0),                                    // 2: dtalk.group.GroupJoinType
	(GroupMuteType)(0),                                    // 3: dtalk.group.GroupMuteType
	(GroupFriendType)(0),                                  // 4: dtalk.group.GroupFriendType
	(GroupMemberType)(0),                                  // 5: dtalk.group.GroupMemberType
	(*GroupInfo)(nil),                                     // 6: dtalk.group.GroupInfo
	(*GroupMemberInfo)(nil),                               // 7: dtalk.group.GroupMemberInfo
	(*GetGroupIdsRequest)(nil),                            // 8: dtalk.group.GetGroupIdsRequest
	(*GetGroupIdsReply)(nil),                              // 9: dtalk.group.GetGroupIdsReply
	(*CheckInGroupRequest)(nil),                           // 10: dtalk.group.CheckInGroupRequest
	(*CheckInGroupReply)(nil),                             // 11: dtalk.group.CheckInGroupReply
	(*GetMemberIdsRequest)(nil),                           // 12: dtalk.group.GetMemberIdsRequest
	(*GetMemberIdsReply)(nil),                             // 13: dtalk.group.GetMemberIdsReply
	(*CheckMuteRequest)(nil),                              // 14: dtalk.group.CheckMuteRequest
	(*CheckMuteReply)(nil),                                // 15: dtalk.group.CheckMuteReply
	(*GetGroupsReq)(nil),                                  // 16: dtalk.group.GetGroupsReq
	(*GetGroupsResp)(nil),                                 // 17: dtalk.group.GetGroupsResp
	(*GroupBizInfo)(nil),                                  // 18: dtalk.group.GroupBizInfo
	(*GroupMemberBizInfo)(nil),                            // 19: dtalk.group.GroupMemberBizInfo
	(*CreateGroupReq)(nil),                                // 20: dtalk.group.CreateGroupReq
	(*CreateGroupResp)(nil),                               // 21: dtalk.group.CreateGroupResp
	(*Condition)(nil),                                     // 22: dtalk.group.Condition
	(*CreateNFTGroupReq)(nil),                             // 23: dtalk.group.CreateNFTGroupReq
	(*CreateNFTGroupResp)(nil),                            // 24: dtalk.group.CreateNFTGroupResp
	(*InviteGroupMembersReq)(nil),                         // 25: dtalk.group.InviteGroupMembersReq
	(*InviteGroupMembersResp)(nil),                        // 26: dtalk.group.InviteGroupMembersResp
	(*GroupExitReq)(nil),                                  // 27: dtalk.group.GroupExitReq
	(*GroupExitResp)(nil),                                 // 28: dtalk.group.GroupExitResp
	(*GroupDisbandReq)(nil),                               // 29: dtalk.group.GroupDisbandReq
	(*GroupDisbandResp)(nil),                              // 30: dtalk.group.GroupDisbandResp
	(*GroupRemoveReq)(nil),                                // 31: dtalk.group.GroupRemoveReq
	(*GroupRemoveResp)(nil),                               // 32: dtalk.group.GroupRemoveResp
	(*ChangeOwnerReq)(nil),                                // 33: dtalk.group.ChangeOwnerReq
	(*ChangeOwnerResp)(nil),                               // 34: dtalk.group.ChangeOwnerResp
	(*UpdateGroupNameReq)(nil),                            // 35: dtalk.group.UpdateGroupNameReq
	(*UpdateGroupNameResp)(nil),                           // 36: dtalk.group.UpdateGroupNameResp
	(*UpdateGroupAvatarReq)(nil),                          // 37: dtalk.group.UpdateGroupAvatarReq
	(*UpdateGroupAvatarResp)(nil),                         // 38: dtalk.group.UpdateGroupAvatarResp
	(*UpdateGroupJoinTypeReq)(nil),                        // 39: dtalk.group.UpdateGroupJoinTypeReq
	(*UpdateGroupJoinTypeResp)(nil),                       // 40: dtalk.group.UpdateGroupJoinTypeResp
	(*UpdateGroupFriendTypeReq)(nil),                      // 41: dtalk.group.UpdateGroupFriendTypeReq
	(*UpdateGroupFriendTypeResp)(nil),                     // 42: dtalk.group.UpdateGroupFriendTypeResp
	(*UpdateGroupMuteTypeReq)(nil),                        // 43: dtalk.group.UpdateGroupMuteTypeReq
	(*UpdateGroupMuteTypeResp)(nil),                       // 44: dtalk.group.UpdateGroupMuteTypeResp
	(*UpdateGroupMemberNameReq)(nil),                      // 45: dtalk.group.UpdateGroupMemberNameReq
	(*UpdateGroupMemberNameResp)(nil),                     // 46: dtalk.group.UpdateGroupMemberNameResp
	(*SetAdminReq)(nil),                                   // 47: dtalk.group.SetAdminReq
	(*SetAdminResp)(nil),                                  // 48: dtalk.group.SetAdminResp
	(*UpdateGroupMemberMuteTimeReq)(nil),                  // 49: dtalk.group.UpdateGroupMemberMuteTimeReq
	(*UpdateGroupMemberMuteTimeResp)(nil),                 // 50: dtalk.group.UpdateGroupMemberMuteTimeResp
	(*GetPriGroupInfoReq)(nil),                            // 51: dtalk.group.GetPriGroupInfoReq
	(*GetPriGroupInfoResp)(nil),                           // 52: dtalk.group.GetPriGroupInfoResp
	(*GetPubGroupInfoReq)(nil),                            // 53: dtalk.group.GetPubGroupInfoReq
	(*GetPubGroupInfoResp)(nil),                           // 54: dtalk.group.GetPubGroupInfoResp
	(*GetGroupListReq)(nil),                               // 55: dtalk.group.GetGroupListReq
	(*GetGroupListResp)(nil),                              // 56: dtalk.group.GetGroupListResp
	(*GetGroupMemberListReq)(nil),                         // 57: dtalk.group.GetGroupMemberListReq
	(*GetGroupMemberListResp)(nil),                        // 58: dtalk.group.GetGroupMemberListResp
	(*GetGroupMemberInfoReq)(nil),                         // 59: dtalk.group.GetGroupMemberInfoReq
	(*GetGroupMemberInfoResp)(nil),                        // 60: dtalk.group.GetGroupMemberInfoResp
	(*GetMuteListReq)(nil),                                // 61: dtalk.group.GetMuteListReq
	(*GetMuteListResp)(nil),                               // 62: dtalk.group.GetMuteListResp
	(*GetNFTGroupExtInfoReq)(nil),                         // 63: dtalk.group.GetNFTGroupExtInfoReq
	(*GetNFTGroupExtInfoResp)(nil),                        // 64: dtalk.group.GetNFTGroupExtInfoResp
	(*GetNFTGroupsExtInfoReq)(nil),                        // 65: dtalk.group.GetNFTGroupsExtInfoReq
	(*GetNFTGroupsExtInfoResp)(nil),                       // 66: dtalk.group.GetNFTGroupsExtInfoResp
	(*ForceAddMemberReq)(nil),                             // 67: dtalk.group.ForceAddMemberReq
	(*ForceAddMemberResp)(nil),                            // 68: dtalk.group.ForceAddMemberResp
	(*ForceAddMembersReq)(nil),                            // 69: dtalk.group.ForceAddMembersReq
	(*ForceAddMembersResp)(nil),                           // 70: dtalk.group.ForceAddMembersResp
	(*ForceDeleteMemberReq)(nil),                          // 71: dtalk.group.ForceDeleteMemberReq
	(*ForceDeleteMemberResp)(nil),                         // 72: dtalk.group.ForceDeleteMemberResp
	(*ForceDeleteMembersReq)(nil),                         // 73: dtalk.group.ForceDeleteMembersReq
	(*ForceDeleteMembersResp)(nil),                        // 74: dtalk.group.ForceDeleteMembersResp
	(*GetMemberReq)(nil),                                  // 75: dtalk.group.GetMemberReq
	(*GetMemberResp)(nil),                                 // 76: dtalk.group.GetMemberResp
	(*GetGroupInfoReq)(nil),                               // 77: dtalk.group.GetGroupInfoReq
	(*GetGroupInfoResp)(nil),                              // 78: dtalk.group.GetGroupInfoResp
	(*ForceDisbandGroupReq)(nil),                          // 79: dtalk.group.ForceDisbandGroupReq
	(*ForceDisbandGroupResp)(nil),                         // 80: dtalk.group.ForceDisbandGroupResp
	(*ForceUpdateGroupTypeReq)(nil),                       // 81: dtalk.group.ForceUpdateGroupTypeReq
	(*ForceUpdateGroupTypeResp)(nil),                      // 82: dtalk.group.ForceUpdateGroupTypeResp
	(*ForceJoinGroupsReq)(nil),                            // 83: dtalk.group.ForceJoinGroupsReq
	(*ForceJoinGroupsResp)(nil),                           // 84: dtalk.group.ForceJoinGroupsResp
	(*ForceExitGroupsReq)(nil),                            // 85: dtalk.group.ForceExitGroupsReq
	(*ForceExitGroupsResp)(nil),                           // 86: dtalk.group.ForceExitGroupsResp
	(*ForceChangeOwnerReq)(nil),                           // 87: dtalk.group.ForceChangeOwnerReq
	(*ForceChangeOwnerResp)(nil),                          // 88: dtalk.group.ForceChangeOwnerResp
	(*Condition_NFT)(nil),                                 // 89: dtalk.group.Condition.NFT
	(*GetNFTGroupsExtInfoResp_ConditionUnionGroupId)(nil), // 90: dtalk.group.GetNFTGroupsExtInfoResp.ConditionUnionGroupId
}
var file_group_proto_depIdxs = []int32{
	6,  // 0: dtalk.group.GetGroupsResp.groups:type_name -> dtalk.group.GroupInfo
	0,  // 1: dtalk.group.GroupBizInfo.status:type_name -> dtalk.group.GroupStatus
	2,  // 2: dtalk.group.GroupBizInfo.join_type:type_name -> dtalk.group.GroupJoinType
	3,  // 3: dtalk.group.GroupBizInfo.mute_type:type_name -> dtalk.group.GroupMuteType
	4,  // 4: dtalk.group.GroupBizInfo.friend_type:type_name -> dtalk.group.GroupFriendType
	1,  // 5: dtalk.group.GroupBizInfo.type:type_name -> dtalk.group.GroupType
	19, // 6: dtalk.group.GroupBizInfo.owner:type_name -> dtalk.group.GroupMemberBizInfo
	19, // 7: dtalk.group.GroupBizInfo.person:type_name -> dtalk.group.GroupMemberBizInfo
	19, // 8: dtalk.group.GroupBizInfo.members:type_name -> dtalk.group.GroupMemberBizInfo
	5,  // 9: dtalk.group.GroupMemberBizInfo.type:type_name -> dtalk.group.GroupMemberType
	1,  // 10: dtalk.group.CreateGroupReq.group_type:type_name -> dtalk.group.GroupType
	7,  // 11: dtalk.group.CreateGroupReq.owner:type_name -> dtalk.group.GroupMemberInfo
	7,  // 12: dtalk.group.CreateGroupReq.members:type_name -> dtalk.group.GroupMemberInfo
	89, // 13: dtalk.group.Condition.nft:type_name -> dtalk.group.Condition.NFT
	1,  // 14: dtalk.group.CreateNFTGroupReq.group_type:type_name -> dtalk.group.GroupType
	7,  // 15: dtalk.group.CreateNFTGroupReq.owner:type_name -> dtalk.group.GroupMemberInfo
	7,  // 16: dtalk.group.CreateNFTGroupReq.members:type_name -> dtalk.group.GroupMemberInfo
	22, // 17: dtalk.group.CreateNFTGroupReq.condition:type_name -> dtalk.group.Condition
	2,  // 18: dtalk.group.UpdateGroupJoinTypeReq.group_join_type:type_name -> dtalk.group.GroupJoinType
	4,  // 19: dtalk.group.UpdateGroupFriendTypeReq.group_friend_type:type_name -> dtalk.group.GroupFriendType
	3,  // 20: dtalk.group.UpdateGroupMuteTypeReq.group_mute_type:type_name -> dtalk.group.GroupMuteType
	5,  // 21: dtalk.group.SetAdminReq.group_member_type:type_name -> dtalk.group.GroupMemberType
	19, // 22: dtalk.group.UpdateGroupMemberMuteTimeResp.members:type_name -> dtalk.group.GroupMemberBizInfo
	18, // 23: dtalk.group.GetPriGroupInfoResp.group:type_name -> dtalk.group.GroupBizInfo
	18, // 24: dtalk.group.GetPubGroupInfoResp.group:type_name -> dtalk.group.GroupBizInfo
	18, // 25: dtalk.group.GetGroupListResp.groups:type_name -> dtalk.group.GroupBizInfo
	19, // 26: dtalk.group.GetGroupMemberListResp.members:type_name -> dtalk.group.GroupMemberBizInfo
	19, // 27: dtalk.group.GetGroupMemberInfoResp.member:type_name -> dtalk.group.GroupMemberBizInfo
	19, // 28: dtalk.group.GetMuteListResp.members:type_name -> dtalk.group.GroupMemberBizInfo
	22, // 29: dtalk.group.GetNFTGroupExtInfoResp.condition:type_name -> dtalk.group.Condition
	90, // 30: dtalk.group.GetNFTGroupsExtInfoResp.conditions:type_name -> dtalk.group.GetNFTGroupsExtInfoResp.ConditionUnionGroupId
	7,  // 31: dtalk.group.ForceAddMembersReq.members:type_name -> dtalk.group.GroupMemberInfo
	7,  // 32: dtalk.group.ForceJoinGroupsReq.member:type_name -> dtalk.group.GroupMemberInfo
	7,  // 33: dtalk.group.ForceExitGroupsReq.member:type_name -> dtalk.group.GroupMemberInfo
	7,  // 34: dtalk.group.ForceChangeOwnerReq.member:type_name -> dtalk.group.GroupMemberInfo
	22, // 35: dtalk.group.GetNFTGroupsExtInfoResp.ConditionUnionGroupId.condition:type_name -> dtalk.group.Condition
	8,  // 36: dtalk.group.Group.GetGroupIds:input_type -> dtalk.group.GetGroupIdsRequest
	10, // 37: dtalk.group.Group.CheckInGroup:input_type -> dtalk.group.CheckInGroupRequest
	12, // 38: dtalk.group.Group.GetMemberIds:input_type -> dtalk.group.GetMemberIdsRequest
	14, // 39: dtalk.group.Group.CheckMute:input_type -> dtalk.group.CheckMuteRequest
	16, // 40: dtalk.group.Group.GetGroups:input_type -> dtalk.group.GetGroupsReq
	75, // 41: dtalk.group.Group.GetMember:input_type -> dtalk.group.GetMemberReq
	77, // 42: dtalk.group.Group.GetGroupInfo:input_type -> dtalk.group.GetGroupInfoReq
	20, // 43: dtalk.group.Group.CreateGroup:input_type -> dtalk.group.CreateGroupReq
	23, // 44: dtalk.group.Group.CreateNFTGroup:input_type -> dtalk.group.CreateNFTGroupReq
	25, // 45: dtalk.group.Group.InviteGroupMembers:input_type -> dtalk.group.InviteGroupMembersReq
	27, // 46: dtalk.group.Group.GroupExit:input_type -> dtalk.group.GroupExitReq
	29, // 47: dtalk.group.Group.GroupDisband:input_type -> dtalk.group.GroupDisbandReq
	31, // 48: dtalk.group.Group.GroupRemove:input_type -> dtalk.group.GroupRemoveReq
	33, // 49: dtalk.group.Group.ChangeOwner:input_type -> dtalk.group.ChangeOwnerReq
	35, // 50: dtalk.group.Group.UpdateGroupName:input_type -> dtalk.group.UpdateGroupNameReq
	37, // 51: dtalk.group.Group.UpdateGroupAvatar:input_type -> dtalk.group.UpdateGroupAvatarReq
	39, // 52: dtalk.group.Group.UpdateGroupJoinType:input_type -> dtalk.group.UpdateGroupJoinTypeReq
	41, // 53: dtalk.group.Group.UpdateGroupFriendType:input_type -> dtalk.group.UpdateGroupFriendTypeReq
	43, // 54: dtalk.group.Group.UpdateGroupMuteType:input_type -> dtalk.group.UpdateGroupMuteTypeReq
	45, // 55: dtalk.group.Group.UpdateGroupMemberName:input_type -> dtalk.group.UpdateGroupMemberNameReq
	47, // 56: dtalk.group.Group.SetAdmin:input_type -> dtalk.group.SetAdminReq
	49, // 57: dtalk.group.Group.UpdateGroupMemberMuteTime:input_type -> dtalk.group.UpdateGroupMemberMuteTimeReq
	51, // 58: dtalk.group.Group.GetPriGroupInfo:input_type -> dtalk.group.GetPriGroupInfoReq
	53, // 59: dtalk.group.Group.GetPubGroupInfo:input_type -> dtalk.group.GetPubGroupInfoReq
	55, // 60: dtalk.group.Group.GetGroupList:input_type -> dtalk.group.GetGroupListReq
	57, // 61: dtalk.group.Group.GetGroupMemberList:input_type -> dtalk.group.GetGroupMemberListReq
	59, // 62: dtalk.group.Group.GetGroupMemberInfo:input_type -> dtalk.group.GetGroupMemberInfoReq
	61, // 63: dtalk.group.Group.GetMuteList:input_type -> dtalk.group.GetMuteListReq
	63, // 64: dtalk.group.Group.GetNFTGroupExtInfo:input_type -> dtalk.group.GetNFTGroupExtInfoReq
	65, // 65: dtalk.group.Group.GetNFTGroupsExtInfo:input_type -> dtalk.group.GetNFTGroupsExtInfoReq
	81, // 66: dtalk.group.Group.ForceUpdateGroupType:input_type -> dtalk.group.ForceUpdateGroupTypeReq
	79, // 67: dtalk.group.Group.ForceDisbandGroup:input_type -> dtalk.group.ForceDisbandGroupReq
	67, // 68: dtalk.group.Group.ForceAddMember:input_type -> dtalk.group.ForceAddMemberReq
	69, // 69: dtalk.group.Group.ForceAddMembers:input_type -> dtalk.group.ForceAddMembersReq
	71, // 70: dtalk.group.Group.ForceDeleteMember:input_type -> dtalk.group.ForceDeleteMemberReq
	73, // 71: dtalk.group.Group.ForceDeleteMembers:input_type -> dtalk.group.ForceDeleteMembersReq
	83, // 72: dtalk.group.Group.ForceJoinGroups:input_type -> dtalk.group.ForceJoinGroupsReq
	85, // 73: dtalk.group.Group.ForceExitGroups:input_type -> dtalk.group.ForceExitGroupsReq
	87, // 74: dtalk.group.Group.ForceChangeOwner:input_type -> dtalk.group.ForceChangeOwnerReq
	9,  // 75: dtalk.group.Group.GetGroupIds:output_type -> dtalk.group.GetGroupIdsReply
	11, // 76: dtalk.group.Group.CheckInGroup:output_type -> dtalk.group.CheckInGroupReply
	13, // 77: dtalk.group.Group.GetMemberIds:output_type -> dtalk.group.GetMemberIdsReply
	15, // 78: dtalk.group.Group.CheckMute:output_type -> dtalk.group.CheckMuteReply
	17, // 79: dtalk.group.Group.GetGroups:output_type -> dtalk.group.GetGroupsResp
	76, // 80: dtalk.group.Group.GetMember:output_type -> dtalk.group.GetMemberResp
	78, // 81: dtalk.group.Group.GetGroupInfo:output_type -> dtalk.group.GetGroupInfoResp
	21, // 82: dtalk.group.Group.CreateGroup:output_type -> dtalk.group.CreateGroupResp
	24, // 83: dtalk.group.Group.CreateNFTGroup:output_type -> dtalk.group.CreateNFTGroupResp
	26, // 84: dtalk.group.Group.InviteGroupMembers:output_type -> dtalk.group.InviteGroupMembersResp
	28, // 85: dtalk.group.Group.GroupExit:output_type -> dtalk.group.GroupExitResp
	30, // 86: dtalk.group.Group.GroupDisband:output_type -> dtalk.group.GroupDisbandResp
	32, // 87: dtalk.group.Group.GroupRemove:output_type -> dtalk.group.GroupRemoveResp
	34, // 88: dtalk.group.Group.ChangeOwner:output_type -> dtalk.group.ChangeOwnerResp
	36, // 89: dtalk.group.Group.UpdateGroupName:output_type -> dtalk.group.UpdateGroupNameResp
	38, // 90: dtalk.group.Group.UpdateGroupAvatar:output_type -> dtalk.group.UpdateGroupAvatarResp
	40, // 91: dtalk.group.Group.UpdateGroupJoinType:output_type -> dtalk.group.UpdateGroupJoinTypeResp
	42, // 92: dtalk.group.Group.UpdateGroupFriendType:output_type -> dtalk.group.UpdateGroupFriendTypeResp
	44, // 93: dtalk.group.Group.UpdateGroupMuteType:output_type -> dtalk.group.UpdateGroupMuteTypeResp
	46, // 94: dtalk.group.Group.UpdateGroupMemberName:output_type -> dtalk.group.UpdateGroupMemberNameResp
	48, // 95: dtalk.group.Group.SetAdmin:output_type -> dtalk.group.SetAdminResp
	50, // 96: dtalk.group.Group.UpdateGroupMemberMuteTime:output_type -> dtalk.group.UpdateGroupMemberMuteTimeResp
	52, // 97: dtalk.group.Group.GetPriGroupInfo:output_type -> dtalk.group.GetPriGroupInfoResp
	54, // 98: dtalk.group.Group.GetPubGroupInfo:output_type -> dtalk.group.GetPubGroupInfoResp
	56, // 99: dtalk.group.Group.GetGroupList:output_type -> dtalk.group.GetGroupListResp
	58, // 100: dtalk.group.Group.GetGroupMemberList:output_type -> dtalk.group.GetGroupMemberListResp
	60, // 101: dtalk.group.Group.GetGroupMemberInfo:output_type -> dtalk.group.GetGroupMemberInfoResp
	62, // 102: dtalk.group.Group.GetMuteList:output_type -> dtalk.group.GetMuteListResp
	64, // 103: dtalk.group.Group.GetNFTGroupExtInfo:output_type -> dtalk.group.GetNFTGroupExtInfoResp
	66, // 104: dtalk.group.Group.GetNFTGroupsExtInfo:output_type -> dtalk.group.GetNFTGroupsExtInfoResp
	82, // 105: dtalk.group.Group.ForceUpdateGroupType:output_type -> dtalk.group.ForceUpdateGroupTypeResp
	80, // 106: dtalk.group.Group.ForceDisbandGroup:output_type -> dtalk.group.ForceDisbandGroupResp
	68, // 107: dtalk.group.Group.ForceAddMember:output_type -> dtalk.group.ForceAddMemberResp
	70, // 108: dtalk.group.Group.ForceAddMembers:output_type -> dtalk.group.ForceAddMembersResp
	72, // 109: dtalk.group.Group.ForceDeleteMember:output_type -> dtalk.group.ForceDeleteMemberResp
	74, // 110: dtalk.group.Group.ForceDeleteMembers:output_type -> dtalk.group.ForceDeleteMembersResp
	84, // 111: dtalk.group.Group.ForceJoinGroups:output_type -> dtalk.group.ForceJoinGroupsResp
	86, // 112: dtalk.group.Group.ForceExitGroups:output_type -> dtalk.group.ForceExitGroupsResp
	88, // 113: dtalk.group.Group.ForceChangeOwner:output_type -> dtalk.group.ForceChangeOwnerResp
	75, // [75:114] is the sub-list for method output_type
	36, // [36:75] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_group_proto_init() }
func file_group_proto_init() {
	if File_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMuteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBizInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberBizInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNFTGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNFTGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupMembersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupExitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupExitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDisbandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDisbandResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRemoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRemoveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeOwnerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupAvatarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupAvatarResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupJoinTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupJoinTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupFriendTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupFriendTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMuteTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMuteTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMemberNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMemberNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAdminReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAdminResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMemberMuteTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMemberMuteTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPubGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPubGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMuteListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMuteListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTGroupExtInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTGroupExtInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTGroupsExtInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTGroupsExtInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceAddMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceAddMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceAddMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceAddMembersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceDeleteMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceDeleteMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceDeleteMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceDeleteMembersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceDisbandGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceDisbandGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceUpdateGroupTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceUpdateGroupTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceJoinGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceJoinGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceExitGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceExitGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceChangeOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceChangeOwnerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_NFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNFTGroupsExtInfoResp_ConditionUnionGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_group_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_group_proto_goTypes,
		DependencyIndexes: file_group_proto_depIdxs,
		EnumInfos:         file_group_proto_enumTypes,
		MessageInfos:      file_group_proto_msgTypes,
	}.Build()
	File_group_proto = out.File
	file_group_proto_rawDesc = nil
	file_group_proto_goTypes = nil
	file_group_proto_depIdxs = nil
}
