// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package store

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	DelRecord(ctx context.Context, in *DelRecordReq, opts ...grpc.CallOption) (*DelRecordReply, error)
	GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordReply, error)
	AddRecordFocus(ctx context.Context, in *AddRecordFocusReq, opts ...grpc.CallOption) (*AddRecordFocusReply, error)
	GetRecordsAfterMid(ctx context.Context, in *GetRecordsAfterMidReq, opts ...grpc.CallOption) (*GetRecordsAfterMidReply, error)
	GetSyncRecordsAfterMid(ctx context.Context, in *GetSyncRecordsAfterMidReq, opts ...grpc.CallOption) (*GetSyncRecordsAfterMidReply, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) DelRecord(ctx context.Context, in *DelRecordReq, opts ...grpc.CallOption) (*DelRecordReply, error) {
	out := new(DelRecordReply)
	err := c.cc.Invoke(ctx, "/dtalk.store.Store/DelRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordReply, error) {
	out := new(GetRecordReply)
	err := c.cc.Invoke(ctx, "/dtalk.store.Store/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) AddRecordFocus(ctx context.Context, in *AddRecordFocusReq, opts ...grpc.CallOption) (*AddRecordFocusReply, error) {
	out := new(AddRecordFocusReply)
	err := c.cc.Invoke(ctx, "/dtalk.store.Store/AddRecordFocus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetRecordsAfterMid(ctx context.Context, in *GetRecordsAfterMidReq, opts ...grpc.CallOption) (*GetRecordsAfterMidReply, error) {
	out := new(GetRecordsAfterMidReply)
	err := c.cc.Invoke(ctx, "/dtalk.store.Store/GetRecordsAfterMid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetSyncRecordsAfterMid(ctx context.Context, in *GetSyncRecordsAfterMidReq, opts ...grpc.CallOption) (*GetSyncRecordsAfterMidReply, error) {
	out := new(GetSyncRecordsAfterMidReply)
	err := c.cc.Invoke(ctx, "/dtalk.store.Store/GetSyncRecordsAfterMid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	DelRecord(context.Context, *DelRecordReq) (*DelRecordReply, error)
	GetRecord(context.Context, *GetRecordReq) (*GetRecordReply, error)
	AddRecordFocus(context.Context, *AddRecordFocusReq) (*AddRecordFocusReply, error)
	GetRecordsAfterMid(context.Context, *GetRecordsAfterMidReq) (*GetRecordsAfterMidReply, error)
	GetSyncRecordsAfterMid(context.Context, *GetSyncRecordsAfterMidReq) (*GetSyncRecordsAfterMidReply, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) DelRecord(context.Context, *DelRecordReq) (*DelRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRecord not implemented")
}
func (UnimplementedStoreServer) GetRecord(context.Context, *GetRecordReq) (*GetRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedStoreServer) AddRecordFocus(context.Context, *AddRecordFocusReq) (*AddRecordFocusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecordFocus not implemented")
}
func (UnimplementedStoreServer) GetRecordsAfterMid(context.Context, *GetRecordsAfterMidReq) (*GetRecordsAfterMidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordsAfterMid not implemented")
}
func (UnimplementedStoreServer) GetSyncRecordsAfterMid(context.Context, *GetSyncRecordsAfterMidReq) (*GetSyncRecordsAfterMidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncRecordsAfterMid not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_DelRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DelRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.store.Store/DelRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DelRecord(ctx, req.(*DelRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.store.Store/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetRecord(ctx, req.(*GetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_AddRecordFocus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordFocusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).AddRecordFocus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.store.Store/AddRecordFocus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).AddRecordFocus(ctx, req.(*AddRecordFocusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetRecordsAfterMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsAfterMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetRecordsAfterMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.store.Store/GetRecordsAfterMid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetRecordsAfterMid(ctx, req.(*GetRecordsAfterMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetSyncRecordsAfterMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncRecordsAfterMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetSyncRecordsAfterMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.store.Store/GetSyncRecordsAfterMid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetSyncRecordsAfterMid(ctx, req.(*GetSyncRecordsAfterMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtalk.store.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelRecord",
			Handler:    _Store_DelRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Store_GetRecord_Handler,
		},
		{
			MethodName: "AddRecordFocus",
			Handler:    _Store_AddRecordFocus_Handler,
		},
		{
			MethodName: "GetRecordsAfterMid",
			Handler:    _Store_GetRecordsAfterMid_Handler,
		},
		{
			MethodName: "GetSyncRecordsAfterMid",
			Handler:    _Store_GetSyncRecordsAfterMid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
