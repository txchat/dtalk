// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vip

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VIPSrvClient is the client API for VIPSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VIPSrvClient interface {
	AddVIPs(ctx context.Context, in *AddVIPsReq, opts ...grpc.CallOption) (*AddVIPsReply, error)
	GetVIPs(ctx context.Context, in *GetVIPsReq, opts ...grpc.CallOption) (*GetVIPsReply, error)
	GetVIP(ctx context.Context, in *GetVIPReq, opts ...grpc.CallOption) (*GetVIPReply, error)
}

type vIPSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewVIPSrvClient(cc grpc.ClientConnInterface) VIPSrvClient {
	return &vIPSrvClient{cc}
}

func (c *vIPSrvClient) AddVIPs(ctx context.Context, in *AddVIPsReq, opts ...grpc.CallOption) (*AddVIPsReply, error) {
	out := new(AddVIPsReply)
	err := c.cc.Invoke(ctx, "/dtalk.vip.VIPSrv/AddVIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vIPSrvClient) GetVIPs(ctx context.Context, in *GetVIPsReq, opts ...grpc.CallOption) (*GetVIPsReply, error) {
	out := new(GetVIPsReply)
	err := c.cc.Invoke(ctx, "/dtalk.vip.VIPSrv/GetVIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vIPSrvClient) GetVIP(ctx context.Context, in *GetVIPReq, opts ...grpc.CallOption) (*GetVIPReply, error) {
	out := new(GetVIPReply)
	err := c.cc.Invoke(ctx, "/dtalk.vip.VIPSrv/GetVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VIPSrvServer is the server API for VIPSrv service.
// All implementations must embed UnimplementedVIPSrvServer
// for forward compatibility
type VIPSrvServer interface {
	AddVIPs(context.Context, *AddVIPsReq) (*AddVIPsReply, error)
	GetVIPs(context.Context, *GetVIPsReq) (*GetVIPsReply, error)
	GetVIP(context.Context, *GetVIPReq) (*GetVIPReply, error)
	mustEmbedUnimplementedVIPSrvServer()
}

// UnimplementedVIPSrvServer must be embedded to have forward compatible implementations.
type UnimplementedVIPSrvServer struct {
}

func (UnimplementedVIPSrvServer) AddVIPs(context.Context, *AddVIPsReq) (*AddVIPsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVIPs not implemented")
}
func (UnimplementedVIPSrvServer) GetVIPs(context.Context, *GetVIPsReq) (*GetVIPsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVIPs not implemented")
}
func (UnimplementedVIPSrvServer) GetVIP(context.Context, *GetVIPReq) (*GetVIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVIP not implemented")
}
func (UnimplementedVIPSrvServer) mustEmbedUnimplementedVIPSrvServer() {}

// UnsafeVIPSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VIPSrvServer will
// result in compilation errors.
type UnsafeVIPSrvServer interface {
	mustEmbedUnimplementedVIPSrvServer()
}

func RegisterVIPSrvServer(s grpc.ServiceRegistrar, srv VIPSrvServer) {
	s.RegisterService(&VIPSrv_ServiceDesc, srv)
}

func _VIPSrv_AddVIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVIPsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPSrvServer).AddVIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.vip.VIPSrv/AddVIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPSrvServer).AddVIPs(ctx, req.(*AddVIPsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VIPSrv_GetVIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVIPsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPSrvServer).GetVIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.vip.VIPSrv/GetVIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPSrvServer).GetVIPs(ctx, req.(*GetVIPsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VIPSrv_GetVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPSrvServer).GetVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dtalk.vip.VIPSrv/GetVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPSrvServer).GetVIP(ctx, req.(*GetVIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VIPSrv_ServiceDesc is the grpc.ServiceDesc for VIPSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VIPSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtalk.vip.VIPSrv",
	HandlerType: (*VIPSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVIPs",
			Handler:    _VIPSrv_AddVIPs_Handler,
		},
		{
			MethodName: "GetVIPs",
			Handler:    _VIPSrv_GetVIPs_Handler,
		},
		{
			MethodName: "GetVIP",
			Handler:    _VIPSrv_GetVIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
